<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jerry&#39;s blog</title>
  
  <subtitle>Re:Callousmaster</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://callousmaster.github.io/"/>
  <updated>2019-04-17T16:25:33.376Z</updated>
  <id>https://callousmaster.github.io/</id>
  
  <author>
    <name>Callousmaster</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LAMP平台部署及应用（CentOS_7）</title>
    <link href="https://callousmaster.github.io/LinuxService/LAMP%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    <id>https://callousmaster.github.io/LinuxService/LAMP平台部署及应用/</id>
    <published>2019-04-14T11:58:23.000Z</published>
    <updated>2019-04-17T16:25:33.376Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>LAMP架构是目前成熟的企业网站应用模式之一，指的是协同工作的一整套系统和相关软件，能够提供动态Web站点服务及其应用开发环境</p></blockquote><a id="more"></a><h1 id="LAMP平台部署及应用（CentOS-7）"><a href="#LAMP平台部署及应用（CentOS-7）" class="headerlink" title="LAMP平台部署及应用（CentOS_7）"></a>LAMP平台部署及应用（CentOS_7）</h1><h2 id="LAMP平台概述"><a href="#LAMP平台概述" class="headerlink" title="LAMP平台概述"></a>LAMP平台概述</h2><hr><blockquote><p>LAMP架构是目前成熟的企业网站应用模式之一，指的是协同工作的一整套系统和相关软件，能够提供动态Web站点服务及其应用开发环境。LAMP是一个缩写词，具体包括Linux操作系统、Apache网站服务器、MySQL数据库服务器、PHP（或Perl、Python）网页编程语言</p><p>构建LAMP时，各组件的安装顺序依次为Linux、Apache、MySQL、PHP，其中Apache和MySQL的安装并没有严格的顺序，而PHP环境的安装一般放到最后，负责沟通Web服务器和数据库系统以协同工作</p></blockquote><h3 id="LAMP的构成组件"><a href="#LAMP的构成组件" class="headerlink" title="LAMP的构成组件"></a>LAMP的构成组件</h3><ul><li><p>Linux操作系统：作为LAMP架构的基础，提供用于支撑Web站点的d操作系统，能够与其他三个组件提供更好的稳定性、兼容性（AMP组件也支持Windows、UNIX等操作系统）</p></li><li><p>Apache网站服务器：作为LAMP架构的前端，是一款功能强大、稳定性好的Web服务器程序，该服务器直接面向用户提供网站访问，发送网页、图片等文件内容</p></li><li><p>MySQL数据库服务器：作为LAMP架构的后端，是一款流行的开源关系数据库系统。在企业网站、业务系统等应用中，各种账户信息、产品信息、客户资料、业务数据等可以存储到MySQL数据库，其它程序可以通过MySQL语句来查询、更改这些信息</p></li><li><p>PHP、Perl、Python网页编程语言：作为三种开发动态网页的编程语言，负责解释动态网页文件，并提供Web应用程序的开发和运行环境。其中PHP是一种被广泛应用的开放源代码的多用途脚本语言，它可以嵌入到HTML中，尤其适合于Web应用开发</p></li></ul><h3 id="LAMP的应用优势"><a href="#LAMP的应用优势" class="headerlink" title="LAMP的应用优势"></a>LAMP的应用优势</h3><ul><li><p>成本低廉：构成组件都是开放源代码的软件，可以自由获得和免费使用，在技术上和许可证方面没有太严格的限制，大大降低企业成本</p></li><li><p>可定制：拥有大量的额外组件和可扩展功能的模块，能够满足大部分企业应用的定制需求，甚至可以自行开发、添加新的功能</p></li><li><p>方便易用：PHP、Perl等属于解释性语言，开发的各种Web程序不需要编译，方便进行移植使用。整套的网站项目程序，通常只要复制到网站目录下，就可以直接访问</p></li><li><p>易于开发：基于LAMP平台的动态网站中，页面代码简洁，与HTML标记语言的结合度非常好，即使是非专业的程序员也能够轻松读懂乃至修改网页代码</p></li><li><p>安全和稳定：得益于开源的优势，大量的程序员在关注并持续改进LAMP平台的各个组件，发现的问题能够很快得到解决。LAMP架构已经经历了数十年的长期验证，在安全性和稳定性方面表现得非常优秀</p></li></ul><h2 id="使用YUM安装"><a href="#使用YUM安装" class="headerlink" title="使用YUM安装"></a>使用YUM安装</h2><hr><p><strong>系统环境：</strong></p><p><strong>CentOS 7.5.1804_64bit</strong></p><p><strong>LAMP各组件版本：</strong></p><p><strong>跟随YUM仓库内软件包的版本</strong></p><h3 id="安装LAMP软件包"><a href="#安装LAMP软件包" class="headerlink" title="安装LAMP软件包"></a>安装LAMP软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install httpd httpd-devel mysql mysql-server mysql-devel php php-mysql php-gd php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-snmp php-soap curl curl-devel php-bcmath</span><br></pre></td></tr></table></figure><h3 id="设置mysql密码"><a href="#设置mysql密码" class="headerlink" title="设置mysql密码"></a>设置mysql密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;USE mysql; </span><br><span class="line">mysql&gt;UPDATE user SET Password=PASSWORD(&apos;newpassword&apos;) WHERE user=&apos;root&apos;; </span><br><span class="line">mysql&gt;FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="允许远程登录mysql数据库"><a href="#允许远程登录mysql数据库" class="headerlink" title="允许远程登录mysql数据库"></a>允许远程登录mysql数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p </span><br><span class="line">Enter Password: &lt;your new password&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;GRANT ALL PRIVILEGES ON . TO &apos;用户名&apos;@&apos;%&apos; IDENTIFIED BY &apos;密码&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><h3 id="防火墙设置开启80、443端口"><a href="#防火墙设置开启80、443端口" class="headerlink" title="防火墙设置开启80、443端口"></a>防火墙设置开启80、443端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public  --add-service=http</span><br><span class="line">firewall-cmd --permanent --zone=public  --add-service=https</span><br><span class="line">firewall-cmd –reload</span><br></pre></td></tr></table></figure><h3 id="服务开机自启动"><a href="#服务开机自启动" class="headerlink" title="服务开机自启动"></a>服务开机自启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> httpd</span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br></pre></td></tr></table></figure><h2 id="使用源码编译安装"><a href="#使用源码编译安装" class="headerlink" title="使用源码编译安装"></a>使用源码编译安装</h2><hr><p><strong>系统环境：</strong></p><p><strong>CentOS 7.5.1804_64bit</strong></p><p><strong>LAMP各组件版本：</strong></p><p><strong>httpd-2.4.38、mysql-5.6.43、php-7.3.3</strong></p><h3 id="安装Apache（2-4）"><a href="#安装Apache（2-4）" class="headerlink" title="安装Apache（2.4）"></a>安装Apache（2.4）</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">rpm -e httpd --nodeps</span><br><span class="line">//卸载使用RPM方式安装的httpd</span><br><span class="line"></span><br><span class="line">yum -y install -y apr apr-util pcre apr-devel apr-util-devel pcre-devel gcc</span><br><span class="line">//安装依赖软件包</span><br><span class="line"></span><br><span class="line">wget http://www.openssl.org/<span class="built_in">source</span>/openssl-1.1.0-latest.tar.gz</span><br><span class="line">//安装Openssl支持https协议访问，下载源码包</span><br><span class="line"></span><br><span class="line">tar -zxvf openssl-1.1.0-latest.tar.gz -C /usr/src/</span><br><span class="line">//解包</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/src/openssl-1.1.0j/</span><br><span class="line">//进入解压目录</span><br><span class="line"></span><br><span class="line">./config --prefix=/usr/<span class="built_in">local</span>/ssl –shared</span><br><span class="line">//配置编译选项</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">//编译安装</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> /usr/<span class="built_in">local</span>/ssl/lib/ &gt;&gt;/etc/ld.so.conf</span><br><span class="line">//将动态库路径加入系统路径中</span><br><span class="line"></span><br><span class="line">ldconfig</span><br><span class="line">//加载动态库以便系统共享</span><br></pre></td></tr></table></figure><p>下载Apache源码包：<a href="http://httpd.apache.org/download.cgi" target="_blank" rel="noopener">http://httpd.apache.org/download.cgi</a></p><h4 id="源码编译及安装。"><a href="#源码编译及安装。" class="headerlink" title="源码编译及安装。"></a>源码编译及安装。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf httpd-2.4.38.tar.gz -C /usr/src/</span><br><span class="line">//解包</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/src/httpd-2.4.38/</span><br><span class="line">//进入解压目录</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/httpd --<span class="built_in">enable</span>-so --<span class="built_in">enable</span>-rewrite --<span class="built_in">enable</span>-ssl --with-ssl=/usr/<span class="built_in">local</span>/ssl --with-mpm=prefork --<span class="built_in">enable</span>-charset-lite --<span class="built_in">enable</span>-cgi</span><br><span class="line">//配置编译选项</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">//编译并安装</span><br></pre></td></tr></table></figure><h4 id="优化执行路径"><a href="#优化执行路径" class="headerlink" title="优化执行路径"></a>优化执行路径</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"PATH=<span class="variable">$PATH</span>:/usr/local/httpd/bin/"</span> &gt;&gt;/etc/profile</span><br><span class="line">//将Apache命令添加到PATH搜索路径中，写入/etc/profile永久保存</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">//立即读取/etc/profile生效配置</span><br></pre></td></tr></table></figure><h4 id="添加httpd为系统服务"><a href="#添加httpd为系统服务" class="headerlink" title="添加httpd为系统服务"></a>添加httpd为系统服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/<span class="built_in">local</span>/httpd/bin/apachectl /etc/init.d/httpd</span><br><span class="line">//拷贝默认启动脚本文件到服务控制目录</span><br><span class="line"></span><br><span class="line">vim /etc/init.d/httpd</span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># chkconfig:235 88 88                   /服务识别参数，指定3、5级别顺序启动标识号</span></span><br><span class="line"><span class="comment"># description:httpd server                    /描述（需配套使用）</span></span><br><span class="line">//文件开头添加chkconfig识别配置，不添加chkconfig添加服务时报错</span><br><span class="line"></span><br><span class="line">chkconfig --add httpd</span><br><span class="line">//将httpd添加为系统服务</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> httpd</span><br><span class="line">//开机自启动</span><br><span class="line"></span><br><span class="line">chkconfig --list httpd</span><br><span class="line">//查看httpd服务的自启动状态</span><br></pre></td></tr></table></figure><h4 id="配置并启动httpd服务"><a href="#配置并启动httpd服务" class="headerlink" title="配置并启动httpd服务"></a>配置并启动httpd服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/httpd/conf/httpd.conf</span><br><span class="line">197 ServerName www.hiahia.com:80</span><br><span class="line">//编辑httpd主配置文件，寻找该行（197行） ，设置网站名称</span><br><span class="line"></span><br><span class="line">apachectl -t</span><br><span class="line">//检测httpd.conf文件是否有语法错误；“Syntax OK”则无误</span><br><span class="line"></span><br><span class="line">systemctl start httpd</span><br><span class="line">//启动httpd服务</span><br><span class="line"></span><br><span class="line">systemctl status httpd</span><br><span class="line">//查看httpd服务运行状态</span><br></pre></td></tr></table></figure><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p>首先需要解决防火墙问题，CentOS7默认自带的防火墙为firewalld，解决方法如下，二选一。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public  --add-service=http</span><br><span class="line">firewall-cmd --permanent --zone=public  --add-service=https</span><br><span class="line">firewall-cmd –reload</span><br><span class="line">//允许firewall防火墙通过80、443端口</span><br><span class="line"></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">//关闭firewall防火墙，并且开机禁用</span><br></pre></td></tr></table></figure><p><img src="/images/lamp/1.jpg" alt></p><p>//访问服务器地址测试</p><h3 id="安装MySQL（5-6）"><a href="#安装MySQL（5-6）" class="headerlink" title="安装MySQL（5.6）"></a>安装MySQL（5.6）</h3><h4 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rpm -e mysql-server mysql</span><br><span class="line">//卸载使用RPM方式安装MySQL软1件包</span><br><span class="line"></span><br><span class="line">yum -y install ncurses-devel cmake</span><br><span class="line">//安装依赖软件包</span><br></pre></td></tr></table></figure><p>下载MySQL5.6源码包<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></p><h4 id="源码编译及安装"><a href="#源码编译及安装" class="headerlink" title="源码编译及安装"></a>源码编译及安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mysql-5.6.43.tar.gz -C /usr/src/</span><br><span class="line">//解包</span><br><span class="line"></span><br><span class="line">useradd -M -r -s /sbin/nologin mysql</span><br><span class="line">//新建mysql系统用户</span><br><span class="line"></span><br><span class="line">mkdir -p /data/mysql/data</span><br><span class="line">//嵌套创建数据目录</span><br><span class="line"></span><br><span class="line">chown -R mysql.mysql /data/mysql/data/</span><br><span class="line">//更改数据目录属主和属组</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/src/mysql-5.6.43/</span><br><span class="line">//进入解压目录</span><br><span class="line"></span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span>/mysql -DMYSQL_DATADIR=/data/mysql/data -DSYSCONFDIR=/etc -DWITH_EXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci</span><br><span class="line"></span><br><span class="line">编译选项：</span><br><span class="line">-DCMAKE_INSTALL_PREFIX：指定MySQL安装位置</span><br><span class="line">-DDEFAULT_CHARSET：指定默认字符集编码</span><br><span class="line">-DDEFAULT_COLLATION：指定默认使用字符集校对规则</span><br><span class="line">-DWITH-EXTRA-CHARSETS：指定额外支持的其他字符集编码</span><br><span class="line">-DSYSCONFDIR：配置文件存储位置</span><br><span class="line">//配置编译选项</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">//编译并安装</span><br></pre></td></tr></table></figure><h4 id="安装后的其它调整"><a href="#安装后的其它调整" class="headerlink" title="安装后的其它调整"></a>安装后的其它调整</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql.mysql /usr/<span class="built_in">local</span>/mysql/</span><br><span class="line">//更改安装目录属主和属组</span><br><span class="line"></span><br><span class="line">rm -rf /etc/my.cnf</span><br><span class="line">//删除默认存在my.cnf文件</span><br><span class="line"></span><br><span class="line">mv /usr/<span class="built_in">local</span>/mysql/my.cnf /etc/my.cnf</span><br><span class="line">//移动默认的配置文件到/etc/下</span><br><span class="line"></span><br><span class="line">/usr/<span class="built_in">local</span>/mysql/scripts/mysql_install_db --user=mysql --basedir=/usr/<span class="built_in">local</span>/mysql/ --datadir=/data/mysql/data</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">--user：指定运行用户</span><br><span class="line">--basedir：指定MySQL数据库位置</span><br><span class="line">--datadir：指定MySQL数据存储位置</span><br><span class="line">//执行初始化数据库脚本</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"PATH=<span class="variable">$PATH</span>:/usr/local/mysql/bin"</span>&gt;&gt;/etc/profile</span><br><span class="line">//添加MySQL到搜索路径，方便执行命令</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span>  /etc/profile</span><br><span class="line">//立即让profile文件内容生效</span><br></pre></td></tr></table></figure><h4 id="添加系统服务"><a href="#添加系统服务" class="headerlink" title="添加系统服务"></a>添加系统服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/src/mysql-5.6.43/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">//拷贝服务脚本文件到/etc/init.d位置</span><br><span class="line"></span><br><span class="line">chkconfig --add mysqld</span><br><span class="line">//添加为系统服务</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line">//设置开机自启</span><br><span class="line"></span><br><span class="line">chkconfig --list mysqld</span><br><span class="line">//查看开机启动状态</span><br></pre></td></tr></table></figure><h4 id="访问测试-1"><a href="#访问测试-1" class="headerlink" title="访问测试"></a>访问测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql – uroot -p</span><br><span class="line">//登入mysql，默认没有密码，直接回车即可</span><br></pre></td></tr></table></figure><h3 id="安装PHP（7-3）"><a href="#安装PHP（7-3）" class="headerlink" title="安装PHP（7.3）"></a>安装PHP（7.3）</h3><h4 id="准备工作-2"><a href="#准备工作-2" class="headerlink" title="准备工作"></a>准备工作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rpm -e php php-cli php-ldap php-common php-mysql --nodeps</span><br><span class="line">//卸载使用RPM等方式安装的PHP相关软件包</span><br><span class="line"></span><br><span class="line">yum -y install zlib-devel libxml2-devel libtool-ltdl-devel</span><br><span class="line">//安装依赖包</span><br></pre></td></tr></table></figure><h4 id="编译安装PHP"><a href="#编译安装PHP" class="headerlink" title="编译安装PHP"></a>编译安装PHP</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf php-7.3.3.tar.gz -C /usr/src/</span><br><span class="line">//解包</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/src/php-7.3.3/</span><br><span class="line">//定制PHP的配置选项时，最关键的是要指定httpd、mysqld的安装路径，以便添加相应支持设置，使LAMP各组件协同工作。除此之外，还可以指定安装路径、启动多字节支持、加密扩展支持等，请按需添加。</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/php --with-apxs2=/usr/<span class="built_in">local</span>/httpd/bin/apxs --with-pdo-mysql=/usr/<span class="built_in">local</span>/mysql/ --with-openssl --with-config-file-path=/usr/<span class="built_in">local</span>/php --with-mysqli=/usr/<span class="built_in">local</span>/mysql/bin/mysql_config --with-mhash --<span class="built_in">enable</span>-mbstring</span><br><span class="line"></span><br><span class="line">编译选项（./configure --<span class="built_in">help</span> 查看编译参数）：</span><br><span class="line">--prefix：指定PHP安装目录</span><br><span class="line">--with-apxs2：设置Apache HTTP Server提供的apxs模块支持程序的文件位置</span><br><span class="line">--with-mysqli：安装mysqli扩展</span><br><span class="line">--with-pdo-mysql：安装pdo扩展</span><br><span class="line">--with-openssl：添加openssl支持</span><br><span class="line">--with-config-file-path：设置PHP的配置文件php.ini将要存放的位置</span><br><span class="line">--<span class="built_in">enable</span>-mbstring：启动多字节字符串功能，以便支持中文等代码</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">//编译并安装</span><br><span class="line"></span><br><span class="line">php -v</span><br><span class="line">//安装完成查看版本</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"PATH=<span class="variable">$PATH</span>:/usr/local/php/bin"</span> &gt;&gt; /etc/profile</span><br><span class="line">//命令目录加入PATH搜索路径</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">//立即读取文件，生效配置</span><br></pre></td></tr></table></figure><h4 id="配置PHP-FPM"><a href="#配置PHP-FPM" class="headerlink" title="配置PHP-FPM"></a>配置PHP-FPM</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cp php-7.3.3/php.ini-development /usr/<span class="built_in">local</span>/php/php.ini</span><br><span class="line">//拷贝php.ini模板配置文件，下面会详细讲解</span><br><span class="line"></span><br><span class="line">cp /usr/<span class="built_in">local</span>/php/etc/php-fpm.conf.default /usr/<span class="built_in">local</span>/php/etc/php-fpm.conf</span><br><span class="line"></span><br><span class="line">cp /usr/<span class="built_in">local</span>/php/etc/php-fpm.d/www.conf.default /usr/<span class="built_in">local</span>/php/etc/php-fpm.d/www.conf</span><br><span class="line">//拷贝php-fpm模板配置文件</span><br><span class="line"></span><br><span class="line">cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</span><br><span class="line">//拷贝启动脚本到服务管理目录</span><br><span class="line"></span><br><span class="line">chmod +x /etc/init.d/php-fpm</span><br><span class="line">//给予启动脚本执行权限</span><br><span class="line"></span><br><span class="line">/etc/init.d/php-fpm start</span><br><span class="line">//启动php-fpm</span><br><span class="line"></span><br><span class="line">ps -ef | grep php</span><br><span class="line">//查看php-fpm进程</span><br></pre></td></tr></table></figure><h4 id="安装Mcrypt扩展"><a href="#安装Mcrypt扩展" class="headerlink" title="安装Mcrypt扩展"></a>安装Mcrypt扩展</h4><p>实际企业应用中，一部分基于PHP开发的Web应用系统会需要额外的扩展工具，如数据加密工具libmcrypt、mhash、mcrypt等</p><p><strong>PHP7</strong> 要想使用 Mcrypt, 需要安装相应依赖包以及扩展模块，mcrypt 扩展从 php 7.1.0 开始废弃；自 php 7.2.0 起，会移到 pecl</p><p>在 php 官网下载 mcrypt 包 <a href="http://pecl.php.net/package/mcrypt" target="_blank" rel="noopener">http://pecl.php.net/package/mcrypt</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">yum install libmcrypt libmcrypt-devel mcrypt mhash</span><br><span class="line">// yum 安装依赖包</span><br><span class="line"></span><br><span class="line">wget http://pecl.php.net/get/mcrypt-1.0.2.tgz</span><br><span class="line">//wget下载软件包到本地</span><br><span class="line"></span><br><span class="line">tar -xf mcrypt-1.0.2.tgz -C /usr/src/</span><br><span class="line">//解包</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/src/mcrypt-1.0.2/</span><br><span class="line">//进入解压目录</span><br><span class="line"></span><br><span class="line">/usr/<span class="built_in">local</span>/php/bin/phpize</span><br><span class="line"></span><br><span class="line">./configure --with-php-config=/usr/<span class="built_in">local</span>/php/bin/php-config</span><br><span class="line">//配置编译选项mcrypt</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install &amp;&amp; make <span class="built_in">test</span></span><br><span class="line">//编译并安装</span><br><span class="line"></span><br><span class="line">vim /usr/<span class="built_in">local</span>/php/php.ini</span><br><span class="line"></span><br><span class="line">extension=mcrypt.so</span><br><span class="line">//在php.ini加上mcrypt扩展选项</span><br><span class="line"></span><br><span class="line">/etc/init.d/php-fpm restart</span><br><span class="line">//重启 php-fpm</span><br></pre></td></tr></table></figure><h3 id="设置LAMP组件环境"><a href="#设置LAMP组件环境" class="headerlink" title="设置LAMP组件环境"></a>设置LAMP组件环境</h3><p>设置LAMP组件环境，主要包括对PHP的配置文件php.ini、Apache的配置文件httpd.conf的调整。前者用来确定PHP的运行参数，后者用来加载libphp7.so，以便支持PHP网页</p><h4 id="php-ini配置调整"><a href="#php-ini配置调整" class="headerlink" title="php.ini配置调整"></a>php.ini配置调整</h4><p>安装好PHP软件包以后，服务器并不会自动创建php.ini配置文件，但在源码目录下提供两个样例配置文件，分别对应于开发环境、生产环境</p><p>/usr/src/php-7.3.3/php.ini-development</p><p>//开发版样例文件，用于学习、测试</p><p>/usr/src/php-7.3.3/php.ini-production</p><p>//生产版样例文件，用于实际运营</p><p>选择其中一个样例文件，并复制到PHP配置文件目录/usr/local/php下，并改名为php.ini。在php.ini配置文件中，以分号开头的内容表示注释信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/src/php-7.3.3/php.ini-development /usr/local/php/php.ini</span><br></pre></td></tr></table></figure><p>通过修改php.ini文件中的配置内容，可以控制PHP网页的执行特性，如是否允许用户上传文件、设置上传文件的大小限制、设置默认使用的字符集、加载额外的扩展模块等。如果没有特殊要求，可以沿用默认配置，不做任何修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/php/php.ini</span><br><span class="line">default_charset = <span class="string">"utf-8"</span>                      //设置默认字符集为utf-8</span><br><span class="line">file_uploads = On                                         //允许通过PHP网页上传文件</span><br><span class="line">upload_max_filesize = 2M                           //允许上传的文件大小限制</span><br><span class="line">max_file_uploads = 20                                 //每个HTTP最多允许请求上传的文件数</span><br><span class="line">post_max_size = 8M                             //每次提交表单post提交的数据量限制</span><br><span class="line">192  short_open_tag = On                                //允许识别PHP短语法标记，即&lt;?...?&gt;</span><br></pre></td></tr></table></figure><h4 id="httpd-conf配置调整"><a href="#httpd-conf配置调整" class="headerlink" title="httpd.conf配置调整"></a>httpd.conf配置调整</h4><p>要使httpd服务器支持PHP页面解析功能，需通过LoadModule配置项加载PHP程序的模块文件，并通过AddType配置项添加对“.php”类型网页文件的支持。除此还应修改Directory配置行，添加index.php配置项，以识别常见的PHP首页文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/httpd/conf/httpd.conf</span><br><span class="line">156       LoadModule php7_module        modules/libphp7.so</span><br><span class="line">394        AddType application/x-httpd-php .php</span><br><span class="line">256       DirectoryIndex index.html index.php</span><br></pre></td></tr></table></figure><p>上述配置中，LoadModule行在安装PHP过程自动添加，其中的“php7_module”表示模块名称；“modules/libphp7.so”表示模块文件位置。而AddType行需要手动添加，DirectoryIndex行原有基础上对其进行修改即可</p><h3 id="测试LAMP协同工作"><a href="#测试LAMP协同工作" class="headerlink" title="测试LAMP协同工作"></a>测试LAMP协同工作</h3><h4 id="测试PHP网页能否正确显示"><a href="#测试PHP网页能否正确显示" class="headerlink" title="测试PHP网页能否正确显示"></a>测试PHP网页能否正确显示</h4><p>编写“.php”格式的测试网页文件，使用PHP内建的“phpinfo()”函数显示服务器的PHP环境信息，PHP代码应包括在“&lt;?php …?&gt;”标记字之间。将测试网页文件放置到网站根目录下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/httpd/htdocs/test1.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd</span><br><span class="line">//重启httpd服务</span><br></pre></td></tr></table></figure><p><img src="/images/lamp/2.jpg" alt></p><p><img src="/images/lamp/3.jpg" alt></p><p>//可以看到刚刚安装的mcrypt扩展被php成功加载</p><h4 id="测试PHP网页能否访问MySQL数据库"><a href="#测试PHP网页能否访问MySQL数据库" class="headerlink" title="测试PHP网页能否访问MySQL数据库"></a>测试PHP网页能否访问MySQL数据库</h4><p>编写测试网页文件test2.php和test3.php，添加简单的数据库操作命令，用于验证与MySQL服务器的连接、查询等操作。其中“PDO()”“mysqli()”函数用于连接MySQL数据库，需要指定目标主机地址，以及授权访问的用户名、密码（可为空）。</p><p>​       题外话：使用PDO或mysqli都可以连接mysql，但更推荐使用PDO连接数据库，因为PDO支持12种不同的数据库驱动程序，mysqli只支持mysql，而且PDO性能更高。</p><p>​       这里需要测试的是，是否两种方法都可用，如果其中一种方法不可用。请自行安装该方法的扩展包，然后再次测试。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/httpd/htdocs/test2.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $mysqli=<span class="keyword">new</span> PDO(<span class="string">'mysql:host=localhost;port=3306'</span>,<span class="string">'root'</span>,<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">if</span>(!$mysqli)  &#123;</span><br><span class="line">        <span class="keyword">echo</span><span class="string">"database error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span><span class="string">"php env successful"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $mysqli = <span class="keyword">null</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//php代码大意：使用php语言新建一个数据库连接，如果连接失败则返回字符“database error”否则返回字符“php env successful”代表数据库连接成功。php环境搭建完成</span></span><br></pre></td></tr></table></figure><p><img src="/images/lamp/4.jpg" alt></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/httpd/htdocs/test3.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $mysqli = <span class="keyword">new</span> mysqli(<span class="string">'localhost'</span>,<span class="string">'root'</span>,<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">if</span>(!$mysqli)  &#123;</span><br><span class="line">        <span class="keyword">echo</span><span class="string">"database error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span><span class="string">"php env successful"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $mysqli-&gt;close();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/lamp/5.jpg" alt></p><h2 id="LAMP架构应用案例"><a href="#LAMP架构应用案例" class="headerlink" title="LAMP架构应用案例"></a>LAMP架构应用案例</h2><hr><h3 id="部署phpMyAdmin系统"><a href="#部署phpMyAdmin系统" class="headerlink" title="部署phpMyAdmin系统"></a>部署phpMyAdmin系统</h3><p>phpMyAdmin是一个使用PHP语言编写的lamp管理套件，用来图形化管理MySQL数据库的Web应用系统。</p><h4 id="下载软件包"><a href="#下载软件包" class="headerlink" title="下载软件包"></a>下载软件包</h4><p>下载最新版本即可，官网：<a href="https://www.phpmyadmin.net/" target="_blank" rel="noopener">https://www.phpmyadmin.net/</a></p><p>以多国语言版源码包<a href="https://files.phpmyadmin.net/phpMyAdmin/4.8.5/phpMyAdmin-4.8.5-all-languages.tar.gz" target="_blank" rel="noopener">phpMyAdmin-4.8.5-all-languages.tar.gz</a>为例安装</p><h4 id="解包并复制到网站目录"><a href="#解包并复制到网站目录" class="headerlink" title="解包并复制到网站目录"></a>解包并复制到网站目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf phpMyAdmin-4.8.5-all-languages.tar.gz</span><br><span class="line"></span><br><span class="line">mv phpMyAdmin-4.8.5-all-languages/ /usr/<span class="built_in">local</span>/httpd/htdocs/phpMyAdmin</span><br><span class="line">//移动到网站目录下重命名为phpMyAdmin</span><br></pre></td></tr></table></figure><h4 id="建立配置文件config-inc-php"><a href="#建立配置文件config-inc-php" class="headerlink" title="建立配置文件config.inc.php"></a>建立配置文件config.inc.php</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/<span class="built_in">local</span>/httpd/htdocs/phpMyAdmin/config.sample.inc.php /usr/<span class="built_in">local</span>/httpd/htdocs/phpMyAdmin/config.inc.php</span><br></pre></td></tr></table></figure><h4 id="访问phpMyAdmin的web管理界面域名后缀加-phpMyAdmin访问"><a href="#访问phpMyAdmin的web管理界面域名后缀加-phpMyAdmin访问" class="headerlink" title="访问phpMyAdmin的web管理界面域名后缀加/phpMyAdmin访问"></a>访问phpMyAdmin的web管理界面域名后缀加/phpMyAdmin访问</h4><p><img src="/images/lamp/6.jpg" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root password <span class="string">"pwd@123"</span></span><br><span class="line">//phpMyAdmin登陆需要数据库密码，所以设置root用户密码，测试使用。一般不建议使用这种方式设置密码，因为是明文的，可以通过历史命令查看到。</span><br></pre></td></tr></table></figure><p><img src="/images/lamp/7.jpg" alt></p><p>//部署完成，可以通过可视化web界面管理数据库</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;LAMP架构是目前成熟的企业网站应用模式之一，指的是协同工作的一整套系统和相关软件，能够提供动态Web站点服务及其应用开发环境&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LinuxService" scheme="https://callousmaster.github.io/categories/LinuxService/"/>
    
    
      <category term="LAMP" scheme="https://callousmaster.github.io/tags/LAMP/"/>
    
      <category term="CentOS7" scheme="https://callousmaster.github.io/tags/CentOS7/"/>
    
  </entry>
  
  <entry>
    <title>KVM虚拟化</title>
    <link href="https://callousmaster.github.io/KVM%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF/KVM%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    <id>https://callousmaster.github.io/KVM虚拟化技术/KVM虚拟化/</id>
    <published>2018-10-08T06:10:18.000Z</published>
    <updated>2019-04-19T03:45:21.029Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>KVM是开源软件，全称是kernel-based virtual machine（基于内核的虚拟机）。使用半虚拟化技术创建虚拟机的模块，可以将Linux内核转化为一个hypervisor。在KVM环境中运行的每个虚拟化操作系统都将表现为单个独立的系统进程。因此它可以很方便地与Linux系统中的安全模块进行整合（SElinux），可以灵活地实现资源的管理及分配</p></blockquote><p><img src="/images/kvm/title.png" alt style="width:100%"></p><a id="more"></a><h2 id="KVM架构与管理"><a href="#KVM架构与管理" class="headerlink" title="KVM架构与管理"></a>KVM架构与管理</h2><h3 id="1-1-KVM架构"><a href="#1-1-KVM架构" class="headerlink" title="1.1 KVM架构"></a>1.1 KVM架构</h3><h4 id="1-虚拟化概述"><a href="#1-虚拟化概述" class="headerlink" title="1.虚拟化概述"></a>1.虚拟化概述</h4><p>名词：物理机或宿主机（Host，即真机）、虚拟机里面系统（Guest OS）、虚拟机管理程序（VDSM或hypervisor）</p><p>虚拟化（系统虚拟化）：一个物理机上开很多虚拟机，实现互不干扰；虚拟硬件使用物理机硬件资源，每个虚拟机拥有独立的硬件资源</p><p>虚拟机不能直接与物理机资源访问，必须通过VMM（虚拟机管理程序，即VDSM或称Hypervisor)才能访问物理机资源</p><h5 id="虚拟化类型"><a href="#虚拟化类型" class="headerlink" title="虚拟化类型"></a>虚拟化类型</h5><ul><li><p>全虚拟化（本地虚拟化、硬件辅助全虚拟化）：虚拟机中运行的软件与系统不需经过任何修改，就好比运行在真实硬件一样；但依然使用虚拟硬件设备，并且需要硬件支持，物理机需支持虚拟化功能（grep -E ‘vmx|svm’ /proc/cpuinfo，查询intel与AMD是否支持）</p></li><li><p>半虚拟化：另一种类似于全虚拟化的热门技术，它使用Hypervisor(虚拟机管理程序)分享存取底层的硬件, 但是它的客户操作系统集成了虚拟化方面的代码，该方法无需重新编译或引起陷阱，因为操作系统自身能够与虚拟进程进行很好的协作；但半虚拟化需要客户操作系统做一些修改（配合VDSM），这是一个不足之处，但是半虚拟化提供了与原始系统相近的性能，与全虚拟化一样，半虚拟化可以同时能支持多个不同的操作系统</p></li></ul><p><img src="/images/kvm/1.png" alt></p><h4 id="2-虚拟机概述"><a href="#2-虚拟机概述" class="headerlink" title="2.虚拟机概述"></a>2.虚拟机概述</h4><p>虚拟机：运行在计算机上的一款软件程序，模拟计算机硬件的功能，为其他软件程序提供一个独立的计算机环境；使用资源为真机资源</p><h5 id="虚拟机的运行架构"><a href="#虚拟机的运行架构" class="headerlink" title="虚拟机的运行架构"></a>虚拟机的运行架构</h5><ul><li><p>传统运行模式：一台计算机同时只能运行一个操作系统，在系统之上运行运用软件</p></li><li><p>寄居架构：将虚拟机软件安装在操作系统之上，作为一个应用程序，在虚拟机软件创建出来的虚拟机上还可以安装操作系统软件</p></li><li><p>原生架构（裸金属架构）：虚拟机软件不需要依赖其他操作系统，直接安装在计算机硬件上，虚拟机软件本身就是一个操作系统</p></li></ul><h4 id="3-KVM简介"><a href="#3-KVM简介" class="headerlink" title="3.KVM简介"></a>3.KVM简介</h4><ul><li><p>KVM是开源软件，全称是kernel-based virtual machine（基于内核的虚拟机）。使用半虚拟化技术创建虚拟机的模块，可以将Linux内核转化为一个hypervisor。目前Red Hat只支持在64位的RHEL 5.4及以上的系统运行KVM（其余发行版也可使用），同时硬件需要支持VT技术；KVM的前身是QEMU，2008年被Red Hat公司收购并获得一项hypervisor技术，不过Red Hat的KVM被认为是将成为未来Linux hypervisor的主流，准确来说，KVM仅仅是Linux内核的一个模块，管理和创建完整的KVM虚拟机，需要更多的辅助工具</p></li><li><p>KVM在2007年2月被整合到Linux 2.6.20核心中，以可加载核心模块的方式被移植到FreeBSD及illumos上，它依托CPU和虚拟化指令集（如Inter-VT、AMD-V）实现高性能的虚拟化支持；由于与Linux内核高度整合，因此在性能、安全性、兼容性、稳定性上都有很好的表现</p></li><li><p>KVM是x86架构且硬件支持虚拟化技术（如 intel VT 或 AMD-V）的Linux全虚拟化解决方案。它包含一个为处理器提供底层虚拟化 可加载的核心模块kvm.ko（kvm-intel.ko或kvm-AMD.ko）。KVM还需要一个经过修改的QEMU软件（qemu-kvm），作为虚拟机上层控制和界面。KVM能在不改变linux或windows镜像的情况下同时运行多个虚拟机，（它的意思是多个虚拟机使用同一镜像）并为每一个虚拟机配置个性化硬件环境（网卡、磁盘、图形适配器……）。</p></li></ul><p><img src="/images/kvm/2.png" alt></p><p>​       图上简单描述了KVM虚拟化架构，在KVM环境中运行的每个虚拟化操作系统都将表现为单个独立的系统进程。因此它可以很方便地与Linux系统中的安全模块进行整合（SElinux），可以灵活地实现资源的管理及分配</p><h3 id="1-2-KVM安装"><a href="#1-2-KVM安装" class="headerlink" title="1.2 KVM安装"></a>1.2 KVM安装</h3><p>安装前要查看 CPU 是否支持虚拟化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intel CPU：cat /proc/cpuinfo |grep --color vmx</span><br><span class="line">AMD CPU：cat /proc/cpuinfo |grep --color smv</span><br></pre></td></tr></table></figure><p>//若以上操作有输出,就说明 CPU 支持虚拟化</p><p>实验环境注意勾选”CPU虚拟化”</p><p><img src="/images/kvm/3.png" alt></p><h4 id="1-安装方式"><a href="#1-安装方式" class="headerlink" title="1.安装方式"></a>1.安装方式</h4><h5 id="新装系统"><a href="#新装系统" class="headerlink" title="新装系统"></a>新装系统</h5><p>最简单的安装方法就是在安装系统的时候，选择桌面安装，然后选择虚拟化选项</p><p><img src="/images/kvm/4.png" alt></p><p><img src="/images/kvm/5.png" alt></p><h5 id="已装系统"><a href="#已装系统" class="headerlink" title="已装系统"></a>已装系统</h5><p>在已有系统基础上，只需安装KVM所需软件即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /etc/yum.repos.d/*                  //删除默认自带YUM源（自带源为官方在线，需联网）</span><br><span class="line">vim /etc/yum.repos.d/local.repo            //自行新建本地YUM</span><br><span class="line">[<span class="built_in">local</span>]                                    //仓库名称定义</span><br><span class="line">name=<span class="built_in">local</span>                                 //标识名</span><br><span class="line">baseurl=file:///mnt                        //指定源文件所在位置（该处为光盘挂载点）</span><br><span class="line">enabled=1                                  //启用该仓库</span><br><span class="line">gpgcheck=0                                 //不验证软件包密钥</span><br><span class="line">yum clean all &amp;&amp; yum repolist              //清除YUM缓存并重新生成</span><br><span class="line">mount /dev/cdrom /mnt/                     //挂载光盘到/mnt/目录</span><br><span class="line">yum -y groupinstall <span class="string">"Desktop"</span>              //安装GNOME桌面环境</span><br><span class="line">yum -y install qemu-kvm                    //KVM模块</span><br><span class="line">yum -y install qemu-kvm-tools              //KVM调试工具，可不安装</span><br><span class="line">yum -y install python-virtinst             //python组件，记录创建VM时的xml文件</span><br><span class="line">yum -y install qemu-img                    //qemu组件，创建磁盘、启动虚拟机等</span><br><span class="line">yum -y install bridge-utils                //网络支持工具</span><br><span class="line">yum -y install libvirt                     //虚拟机管理工具</span><br><span class="line">yum -y install virt-manager                //图形界面管理虚拟机</span><br><span class="line">yum -y install libguestfs-tools            //virt-cat等命令的支持软件包</span><br><span class="line">reboot                                     //重启系统</span><br><span class="line">lsmod | grep kvm                           //检查KVM模块是否安装</span><br></pre></td></tr></table></figure></p><p><img src="/images/kvm/6.png" alt></p><h4 id="2-设置KVM网络"><a href="#2-设置KVM网络" class="headerlink" title="2.设置KVM网络"></a>2.设置KVM网络</h4><p>宿主服务器安装完成KVM，首先要设定网络，在libvirt中运行KVM网络有两种方法：NAT和Bridge，默认是NAT</p><ul><li><p>用户模式：即NAT方式，这种方式是默认网络，数据包由NAT方式通过主机的接口进行传送，可以访问外网，但是无法从外部访问虚拟机网络</p></li><li><p>桥接模式：即Bridge方式，这种模式允许虚拟机像一台独立的主机一样拥有网络，外部的机器可以直接访问到虚拟机内部，但需要网卡支持，一般有线网卡都支持</p></li></ul><p><img src="/images/kvm/7.png" alt></p><h5 id="Bridge（桥接）模式配置"><a href="#Bridge（桥接）模式配置" class="headerlink" title="Bridge（桥接）模式配置"></a>Bridge（桥接）模式配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">DEVICE=eth0                              //网卡名称</span><br><span class="line">TYPE=Ethernet                            //网卡类型为以太网</span><br><span class="line">ONBOOT=yes                               //开机自启该网卡</span><br><span class="line">NM_CONTROLLED=no                         //关闭NetworkManager</span><br><span class="line">BOOTPROTO=none                           //不指定网卡配置信息（由br0网卡提供）</span><br><span class="line">BRIDGE=<span class="string">"br0"</span>                             //桥接虚拟网卡名称</span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-br0</span><br><span class="line">DEVICE=br0                               //网卡名称</span><br><span class="line">TYPE=Bridge                              //网卡类型为网桥</span><br><span class="line">ONBOOT=yes                               //开机自启该网卡</span><br><span class="line">NM_CONTROLLED=no                         //关闭NetworkManager</span><br><span class="line">BOOTPROTO=dhcp                           //网卡设置为动态获取方式</span><br><span class="line">/etc/init.d/network restart              //重启网络服务</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/8.png" alt></p><p>出现以上信息，说明网卡桥接成功了</p><h3 id="1-3-KVM虚拟机安装"><a href="#1-3-KVM虚拟机安装" class="headerlink" title="1.3 KVM虚拟机安装"></a>1.3 KVM虚拟机安装</h3><h4 id="1-创建存储池"><a href="#1-创建存储池" class="headerlink" title="1.创建存储池"></a>1.创建存储池</h4><p>在安装虚拟机之前，为了方便管理虚拟机的磁盘及镜像文件，一般建议单独新建存储池（即磁盘文件和镜像存储位置指定）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv /kvm/&#123;store,iso&#125;                    //新建磁盘及镜像存储目录</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/9.png" alt></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virt-manager                                  <span class="comment">//运行虚拟机管理软件</span></span><br></pre></td></tr></table></figure><p><img src="/images/kvm/10.png" alt></p><p>双击localhost（QEMU），选择”存储选项卡”，然后单击”+”按钮新建存储池</p><p><img src="/images/kvm/11.png" alt></p><p>根据提示输入存储池名称，如store</p><p><img src="/images/kvm/12.png" alt></p><p>指定store存储池里面内容的存储目录（该处为之前新建的/kvm/store）</p><p><img src="/images/kvm/13.png" alt></p><p>同样的操作再创建一个镜像存储池，命名为iso</p><p><img src="/images/kvm/14.png" alt></p><p>目录为kvm/iso即可</p><p><img src="/images/kvm/15.png" alt></p><p><img src="/images/kvm/16.png" alt></p><h4 id="2-上传镜像到镜像池"><a href="#2-上传镜像到镜像池" class="headerlink" title="2.上传镜像到镜像池"></a>2.上传镜像到镜像池</h4><p>存储池创建完成后，就可以将安装系统的ISO镜像文件上传到/kvm/iso目录，以方便后续安装系统使用</p><p>上传过程略…，这里以Centos 6.7 64bit镜像为例</p><p><img src="/images/kvm/17.png" alt></p><p>cp /root/CentOS-6.7-x86_64-bin-DVD1.iso /kvm/iso/</p><p><img src="/images/kvm/18.png" alt></p><p><img src="/images/kvm/19.png" alt></p><h4 id="3-新建存储卷"><a href="#3-新建存储卷" class="headerlink" title="3.新建存储卷"></a>3.新建存储卷</h4><p>存储卷即安装系统时虚拟机所使用的磁盘文件，那么在vmware软件中是在新建虚拟机时可选择磁盘文件的位置和大小，而KVM可提前新建虚拟机所使用磁盘文件及大小（当然也可直接使用默认KVM创建的default存储池空间），相比更加灵活</p><p><img src="/images/kvm/20.png" alt></p><p>单击刚创建好的”store”存储池，单击对话框右下角的”新建卷”按钮建立一个存储卷</p><p><img src="/images/kvm/21.png" alt></p><p>设置新建存储卷取名并指定卷最大容量与分配容量（Format选择”qcow2”不然不能快照）</p><p><img src="/images/kvm/22.png" alt></p><h4 id="4-新建虚拟机"><a href="#4-新建虚拟机" class="headerlink" title="4.新建虚拟机"></a>4.新建虚拟机</h4><p><img src="/images/kvm/23.png" alt></p><p>回到虚拟系统管理器后，选择”New”选项</p><p><img src="/images/kvm/24.png" alt></p><p>指定新建虚拟机名称为”Centos_6.7”，并指定从本地或光盘中选择镜像安装系统</p><p><img src="/images/kvm/25.png" alt></p><p>指定新建虚拟机采用的系统及对应版本，并”Browse”浏览本地选择镜像</p><p><img src="/images/kvm/26.png" alt></p><p>选择之前创建的镜像存储池”iso”中上传的镜像用于安装系统</p><p><img src="/images/kvm/27.png" alt></p><p>指定新建虚拟机采用的内存及CPU核心数</p><p><img src="/images/kvm/28.png" alt></p><p>选择虚拟机产生文件存储位置，这里选择之前新建存储卷”Centos_6.7”使用它的空间</p><p><img src="/images/kvm/29.png" alt></p><p><img src="/images/kvm/30.png" alt></p><p><img src="/images/kvm/31.png" alt></p><p>选择”Customize …”完成后打开虚拟机编辑页面调整虚拟机配置</p><p><img src="/images/kvm/32.png" alt></p><p>调整虚拟机时间为”localtime”本地时间</p><p><img src="/images/kvm/33.png" alt></p><p>“虚拟机”键盘布局和真机一样（一定选择，不然里面键盘输入有问题）</p><p><img src="/images/kvm/34.png" alt></p><p>开始引导安装系统（其余硬件调整和VMware使用差不多，这里不再阐述）</p><p><img src="/images/kvm/35.png" alt></p><p>安装过程略。</p><p><img src="/images/kvm/36.png" alt></p><h3 id="1-4-KVM基本功能管理"><a href="#1-4-KVM基本功能管理" class="headerlink" title="1.4 KVM基本功能管理"></a>1.4 KVM基本功能管理</h3><h4 id="1-KVM配置文件存放目录"><a href="#1-KVM配置文件存放目录" class="headerlink" title="1.KVM配置文件存放目录"></a>1.KVM配置文件存放目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /etc/libvirt/qemu</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/37.png" alt></p><h4 id="2-查看虚拟机状态"><a href="#2-查看虚拟机状态" class="headerlink" title="2.查看虚拟机状态"></a>2.查看虚拟机状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh list --all                            //查看所有KVM虚拟机状态</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/38.png" alt></p><h4 id="3-虚拟机关机、开机、开机自启等操作"><a href="#3-虚拟机关机、开机、开机自启等操作" class="headerlink" title="3.虚拟机关机、开机、开机自启等操作"></a>3.虚拟机关机、开机、开机自启等操作</h4><h5 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh shutdown Centos_6.7                   //关闭名为Centos_6.7的KVM虚拟机</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/39.png" alt></p><font color="red">注：KVM虚拟机默认是无法用virsh shutdown进行关机的，如果要想使用该命令关机，则必须在kvm虚拟机上安装acpid包，启动acpid服务，并且加入开机启动（并且shutdown命令只能在虚拟机启动后才能关闭）</font><h5 id="开机"><a href="#开机" class="headerlink" title="开机"></a>开机</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh start Centos_6.7                      //开启名为Centos_6.7的KVM虚拟机</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/40.png" alt></p><h5 id="强制关机"><a href="#强制关机" class="headerlink" title="强制关机"></a>强制关机</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh destroy Centos_6.7                    //强制关闭名为Centos_6.7的虚拟机</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/41.png" alt></p><h5 id="挂起（暂停）"><a href="#挂起（暂停）" class="headerlink" title="挂起（暂停）"></a>挂起（暂停）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh <span class="built_in">suspend</span> Centos_6.7                    //挂起名为Centos_6.7的虚拟机</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/42.png" alt></p><h5 id="恢复虚拟机"><a href="#恢复虚拟机" class="headerlink" title="恢复虚拟机"></a>恢复虚拟机</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh resume Centos_6.7                     //恢复被暂停的名为Centos_6.7虚拟机</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/43.png" alt></p><h5 id="开机自启KVM虚拟机"><a href="#开机自启KVM虚拟机" class="headerlink" title="开机自启KVM虚拟机"></a>开机自启KVM虚拟机</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh autostart Centos_6.7                  //Centos_6.7虚拟机伴随宿主机自动启动</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/44.png" alt></p><h5 id="配置文件备份"><a href="#配置文件备份" class="headerlink" title="配置文件备份"></a>配置文件备份</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virsh dumpxml Centos_6.7 &gt;/etc/libvirt/qemu/Centos_6.7.xml.bak</span><br><span class="line">//导出虚拟机配置文件做备份（配置文件中存储虚拟机配置情况等，如CPU、内存等）</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/45.png" alt></p><h5 id="删除KVM虚拟机"><a href="#删除KVM虚拟机" class="headerlink" title="删除KVM虚拟机"></a>删除KVM虚拟机</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh undefine Centos_6.7                  //删除名为Centos_6.7的KVM虚拟机</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/46.png" alt></p><font color="red">注：”undefine”选项只会删除该虚拟机配置文件，而使用的磁盘文件不会删除，如需要彻底删除注意删除磁盘文件；如果只是删除配置文件，当有备份的配置文件时，还可恢复该虚拟机</font><p><img src="/images/kvm/47.png" alt></p><p>​    如上图，可以看出，只是配置文件删除，磁盘文件依然存在</p><h5 id="添加KVM虚拟机"><a href="#添加KVM虚拟机" class="headerlink" title="添加KVM虚拟机"></a>添加KVM虚拟机</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virsh define /etc/libvirt/qemu/Centos_6.7.xml.bak</span><br><span class="line">//通过之前备份的配置文件，重新将Centos_6.7虚拟机添加</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/48.png" alt></p><h5 id="修改KVM虚拟机配置信息"><a href="#修改KVM虚拟机配置信息" class="headerlink" title="修改KVM虚拟机配置信息"></a>修改KVM虚拟机配置信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh edit Centos_6.7                     //编辑虚拟机Centos_6.7的配置文件</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/49.png" alt><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/libvirt/qemu/Centos_6.7.xml      //也可直接编辑配置文件，但不建议使用</span><br></pre></td></tr></table></figure></p><p><img src="/images/kvm/50.png" alt></p><h3 id="1-5-KVM高级功能管理"><a href="#1-5-KVM高级功能管理" class="headerlink" title="1.5 KVM高级功能管理"></a>1.5 KVM高级功能管理</h3><h4 id="1-raw磁盘格式转换为qcow2磁盘格式"><a href="#1-raw磁盘格式转换为qcow2磁盘格式" class="headerlink" title="1.raw磁盘格式转换为qcow2磁盘格式"></a>1.raw磁盘格式转换为qcow2磁盘格式</h4><ul><li><p>KVM虚拟机常用磁盘格式为raw与qcow2格式，默认使用raw格式，那么其中raw格式的磁盘性能最好、速度最快，但不支持AES加密、zlib磁盘压缩等新功能，而qcow2格式磁盘存储空间更小，并支持AES加密、zlib、快照等新功能，缺点是性能较差</p></li><li><p>如果想管理指定虚拟机磁盘（如分区情况、磁盘数量等），可以使用”libguestfs-tools”工具（一般默认安装），下面举例，说明如和转换磁盘格式</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qemu-img info /kvm/store/Centos_6.7.img</span><br><span class="line">//查看指定磁盘文件的信息（如磁盘格式、占用磁盘大小等）</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/51.png" alt><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img convert -f raw -O qcow2 &lt;raw格式磁盘镜像路径&gt; &lt;qcow2格式磁盘镜像路径&gt;</span><br></pre></td></tr></table></figure></p><p>选项：</p><p>-c：对输出的镜像文件进行压缩，但只有qcow2和qcow格式支持</p><p>-f：指定源磁盘格式</p><p>-O：指定转换后磁盘格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qemu-img convert -f raw -O qcow2 /kvm/store/Centos_6.7.img /kvm/store/Centos_6.7.qcow2</span><br><span class="line">//将指定raw格式文件转换为qcow2磁盘格式文件（注意该虚拟机需关机）</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img info /kvm/store/Centos_6.7.qcow2    //查看转换后磁盘格式信息</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/52.png" alt></p><font color="red">注：转换后，需更改KVM虚拟机配置文件，因为虚拟机中还是用原磁盘格式文件，需要更改为新转换后的磁盘文件，才能使用新磁盘格式</font><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">virsh edit Centos_6.7                        //编辑指定名为Centos_6.7虚拟机配置文件</span><br><span class="line">    24       &lt;driver name=<span class="string">'qemu'</span> <span class="built_in">type</span>=<span class="string">'qcow2'</span> cache=<span class="string">'none'</span>/&gt;</span><br><span class="line">    25       &lt;<span class="built_in">source</span> file=<span class="string">'/kvm/store/Centos_6.7.qcow2'</span>/&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/53.png" alt><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh start Centos_6.7                      //启动该KVM虚拟机</span><br></pre></td></tr></table></figure></p><h4 id="2-管理KVM虚拟机文件"><a href="#2-管理KVM虚拟机文件" class="headerlink" title="2.管理KVM虚拟机文件"></a>2.管理KVM虚拟机文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">virt-cat -a 磁盘文件路径 文件绝对路径</span><br><span class="line">//查看指定KVM虚拟机磁盘文件里指定路径内容</span><br><span class="line">virt-cat -a /kvm/store/Centos_6.7.qcow2 /etc/sysconfig/network</span><br><span class="line">//查看Centos_6.7.qcow2磁盘文件中/etc/sysconfig/network内容</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/54.png" alt><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">virt-edit -a 磁盘文件路径 文件决定路径</span><br><span class="line">//编辑指定KVM虚拟机磁盘文件里指定路径内容</span><br><span class="line">virt-edit -a /kvm/store/Centos_6.7.qcow2 /etc/sysconfig/network</span><br><span class="line">//编辑Centos_6.7例的/etc/sysconfig/network文件</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virt-df -h 虚拟机名称</span><br><span class="line">//查看指定KVM虚拟机磁盘使用情况</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/55.png" alt></p><h4 id="3-虚拟机克隆"><a href="#3-虚拟机克隆" class="headerlink" title="3.虚拟机克隆"></a>3.虚拟机克隆</h4><p>克隆：即将虚拟机复制一份，快速创建一个同样的虚拟机，节省时间并提高创建效率<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">virt-clone -o 源虚拟机名称 -n 克隆的虚拟机名称 -f 克隆的虚拟机磁盘文件路径</span><br><span class="line">virt-clone -o Centos_6.7 -n Centos_6.7_clone -f /kvm/store/Centos_6.7_clone.qcow2</span><br><span class="line">//将Centos_6.7虚拟机克隆，生成Centos_6.7_clone并指定磁盘文件路径（注意克隆的虚拟机必须关机）</span><br></pre></td></tr></table></figure></p><p><img src="/images/kvm/56.png" alt></p><h4 id="4-虚拟机快照"><a href="#4-虚拟机快照" class="headerlink" title="4.虚拟机快照"></a>4.虚拟机快照</h4><p>快照：将虚拟机系统的某个状态保存，通过快照可快速恢复到虚拟机系统的某个状态</p><p>注：KVM快照只支持qcow2磁盘格式，如不是需转换</p><h5 id="创建快照"><a href="#创建快照" class="headerlink" title="创建快照"></a>创建快照</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virsh snapshot-create 虚拟机名称</span><br><span class="line">virsh snapshot-create Centos_6.7          //给名为Centos_6.7虚拟机创建快照</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/57.png" alt></p><h5 id="查看快照信息"><a href="#查看快照信息" class="headerlink" title="查看快照信息"></a>查看快照信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virsh snapshot-list 虚拟机名称</span><br><span class="line">virsh snapshot-list Centos_6.7            //查看指定虚拟机所有创建的快照信息</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/58.png" alt><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh snapshot-current Centos_6.7   //查看名为Centos_6.7虚拟机详细快照信息</span><br></pre></td></tr></table></figure></p><p><img src="/images/kvm/59.png" alt></p><h5 id="恢复快照"><a href="#恢复快照" class="headerlink" title="恢复快照"></a>恢复快照</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">virsh snapshot-revert 虚拟机名称 快照序号</span><br><span class="line">virsh snapshot-revert Centos_6.7 1520271801</span><br><span class="line">//将名为Centos_6.7的虚拟机恢复到<span class="string">"Name"</span>为1520271801时的状态</span><br></pre></td></tr></table></figure><h5 id="删除快照"><a href="#删除快照" class="headerlink" title="删除快照"></a>删除快照</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">virsh snapshot-delete 虚拟机名称 快照序号</span><br><span class="line">virsh snapshot-delete Centos_6.7 1520271801        </span><br><span class="line">//将Centos_6.7虚拟机<span class="string">"Name"</span>为1520271801的快照删除</span><br></pre></td></tr></table></figure><p><img src="/images/kvm/60.png" alt></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;KVM是开源软件，全称是kernel-based virtual machine（基于内核的虚拟机）。使用半虚拟化技术创建虚拟机的模块，可以将Linux内核转化为一个hypervisor。在KVM环境中运行的每个虚拟化操作系统都将表现为单个独立的系统进程。因此它可以很方便地与Linux系统中的安全模块进行整合（SElinux），可以灵活地实现资源的管理及分配&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/kvm/title.png&quot; alt style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="KVM虚拟化技术" scheme="https://callousmaster.github.io/categories/KVM%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="kvm" scheme="https://callousmaster.github.io/tags/kvm/"/>
    
      <category term="虚拟化" scheme="https://callousmaster.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>MFS分布式文件系统</title>
    <link href="https://callousmaster.github.io/LinuxService/MFS%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>https://callousmaster.github.io/LinuxService/MFS分布式文件系统/</id>
    <published>2018-09-27T07:24:15.000Z</published>
    <updated>2019-04-17T14:19:27.983Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>MooseFS是一个具有容错性的网络分布式文件系统。它把数据分散存放在多个物理服务器上，而呈现给用户的则是一个统一的资源。</p></blockquote><a id="more"></a><h2 id="一、MooseFS"><a href="#一、MooseFS" class="headerlink" title="一、MooseFS"></a>一、MooseFS</h2><hr><ul><li>MooseFS是一个具有容错性的网络分布式文件系统。它把数据分散存放在多个物理服务器上，而呈现给用户的则是一个统一的资源。</li><li>Moose文件系统（MooseFS）是由Core Technology开发的开源，POSIX兼容的分布式文件系统。MooseFS旨在为数据中心提供容错，高可用，高性能，可扩展的通用网络分布式文件系统。最初是专有软件，它于2008年5月5日作为开源向公众发布。</li><li>目前有两个版本的MooseFS：<br>MooseFS - 根据GPLv2许可发布，<br>MooseFS专业版（MooseFS Pro） - 以二进制包形式的专有许可证发布。</li><li>官网地址：<a href="http://www.moosefs.com/" target="_blank" rel="noopener">http://www.moosefs.com/</a></li></ul><h2 id="二、组成"><a href="#二、组成" class="headerlink" title="二、组成"></a>二、组成</h2><hr><p>MooseFS遵循与Fossil（文件系统），Google File System，Lustre或Ceph类似的设计原则。文件系统包括三个组件：</p><ul><li>元数据服务器（Master） - 维护和管理文件的位置（布局），文件访问和命名空间层次结构。当前版本的MooseFS支持多个元数据服务器和自动故障转移。客户端只与MDS通信以检索/更新文件的布局和属性; 数据本身直接在客户端和块服务器之间传输。元数据服务器是用户空间守护程序 ; 元数据保存在内存中，并且懒惰地存储在本地磁盘上。</li><li>元数据日志服务器（Metalogger）- 纪录数据的改动情况，定期从MDS中提取元数据以存储它以进行备份。从版本1.6.5开始，这是一个可选功能。</li><li>块服务器（Chunk Server） - 存储数据并可选地在它们之间进行复制。虽然可扩展性限制尚未发布，但可能有很多。迄今为止报告的最大集群包括160台服务器。[7] Chunk服务器也是一个用户空间守护程序，它依赖于底层本地文件系统来管理实际存储。</li><li>客户端 - 与Master和ChunkServer交谈。MooseFS客户端通过FUSE将文件系统挂载到用户空间。</li><li><img src="/images/mfs/mfs.png" alt></li></ul><h2 id="三、原理"><a href="#三、原理" class="headerlink" title="三、原理"></a>三、原理</h2><hr><h3 id="MFS读过程"><a href="#MFS读过程" class="headerlink" title="MFS读过程"></a>MFS读过程</h3><ul><li>客户端向Master发送读请求</li><li>Master去缓存的数据库（非MySQL）中搜索客户端所需数据的位置，并告知客户端（Chunk Server IP、Chunk编号）</li><li>客户端去指定Chunk Server的对应Chunk编号读取数据</li><li>客户端通知Master读取完毕</li><li><img src="/images/mfs/read.png" alt></li></ul><h3 id="MFS写过程"><a href="#MFS写过程" class="headerlink" title="MFS写过程"></a>MFS写过程</h3><ul><li>客户端向Master发送写请求</li><li>Master通知Chunk Server（谁空闲，如空闲新建Chunk编号），找到后将知道的Chunk Server IP和编号告知客户端</li><li>客户端向指定IP和编号存储数据</li><li>客户端告知Master写入完毕</li><li>Master通知Metalogger有新数据写入（Matelogger纪录新增加文件位置和对应Chunk Server），日志记录完毕后，连接关闭</li><li><img src="/images/mfs/write.png" alt></li></ul><h2 id="四、功能"><a href="#四、功能" class="headerlink" title="四、功能"></a>四、功能</h2><hr><p>为实现高可靠性和高性能，MooseFS提供以下功能：</p><ul><li>容错 - MooseFS使用复制，可以跨块服务器复制数据，每个文件/目录设置复制比率（N）。如果（N-1）个副本失败，则数据仍然可用。目前，MooseFS没有提供任何其他容错技术。因此，对于非常大的文件的容错需要大量的空间–N *文件大小而不是文件大小+（N * stripeize），如RAID 4，RAID 5或RAID 6的情况。MooseFS版本4.x PRO将具有RAID6。</li><li>条带化 - 大文件分为块（最多64 兆字节），可以存储在不同的块服务器上，以实现更高的聚合带宽。</li><li>负载平衡 - MooseFS尝试平等地使用存储资源，当前算法似乎只考虑消耗的空间。</li><li>安全性 - 除了经典的POSIX文件权限之外，自1.6版本发布以来，MooseFS提供了一个简单的，类似NFS的身份验证 / 授权。</li><li>相干快照 - 快速，低开销的快照。</li><li>透明的“垃圾桶” - 删除的文件将保留一段可配置的时间。</li><li>数据分层/存储类 - 可以“标记”服务器，创建称为“存储类”的标签定义，并决定数据存储在哪些类型的服务器上[8]</li><li>“项目”配额支持</li><li>POSIX锁，flock锁支持</li></ul><h2 id="四、数据存储方式"><a href="#四、数据存储方式" class="headerlink" title="四、数据存储方式"></a>四、数据存储方式</h2><hr><ul><li>文件以chunk大小存储，每chunk最大为64M。小于64M的，该chunk的大小即为该文件大小，超过64M的文件将被均分，每一份（chunk）的大小以不超过64M为原则；文件可以有多份copy，即除原始文件以外，该文件还存储的份数。当goal为1时，表示只有一份copy，这份copy会被随机存到一台chunkserver上。当goal的数大于1时，每一份copy会被分别保存到其它chunkserver上。goal的大小不要超过chunkserver的数量，否则多出的copy，不会有chunkserver去存，goal设置再多实际上也就没有意义的。copy的份数，一般设为大于1份，这样如果有一台chunkserver坏掉后，至少还有一份copy，当这台又被加进来后，会将失去的那份copy补回来，始终保持原有的copy数。而如果goal设为1，那么当存储该copy的chunkserver坏掉，之后又重新加入回来，copy数将始终是0，不会恢复到之前的1个copy</li><li>chunkserver上的剩余存储空间要大于1GB，新的数据才会被允许写入，否则，你会看到No space left的提示</li><li>多个chunker并不影响写的速度，但是能加快读的速度，在原来的基础上增加一个chunker时，数据会自动同步到新增的chunker上以达到数据的平衡和均衡</li></ul><h2 id="五、常见问题"><a href="#五、常见问题" class="headerlink" title="五、常见问题"></a>五、常见问题</h2><hr><p><img src="/images/mfs/1.png" alt></p><p><img src="/images/mfs/2.png" alt></p><p><img src="/images/mfs/3.png" alt></p><p><img src="/images/mfs/4.png" alt></p><p>详情见：<a href="https://moosefs.com/faq/" target="_blank" rel="noopener">https://moosefs.com/faq/</a></p><h2 id="六、部署MFS"><a href="#六、部署MFS" class="headerlink" title="六、部署MFS"></a>六、部署MFS</h2><hr><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><table><thead><tr><th style="text-align:left">Role</th><th style="text-align:left">IP</th><th>OS</th><th>RPM</th></tr></thead><tbody><tr><td style="text-align:left">Master</td><td style="text-align:left">192.168.0.21</td><td>CentOS6.7_64bit</td><td>mfs-1.6.27-5.tar.gz</td></tr><tr><td style="text-align:left">MetaLogger</td><td style="text-align:left">192.168.0.22</td><td>CentOS6.7_64bit</td><td>mfs-1.6.27-5.tar.gz</td></tr><tr><td style="text-align:left">Chunk Server 1</td><td style="text-align:left">192.168.0.23</td><td>CentOS6.7_64bit</td><td>mfs-1.6.27-5.tar.gz</td></tr><tr><td style="text-align:left">Chunk Server 2</td><td style="text-align:left">192.168.0.24</td><td>CentOS6.7_64bit</td><td>mfs-1.6.27-5.tar.gz</td></tr><tr><td style="text-align:left">Client</td><td style="text-align:left">192.168.0.25</td><td>CentOS6.7_64bit</td><td>mfs-1.6.27-5.tar.gz   fuse-2.9.2.tar.gz</td></tr></tbody></table><h3 id="搭建Master-Server"><a href="#搭建Master-Server" class="headerlink" title="搭建Master Server"></a>搭建Master Server</h3><p><strong>a.安装环境包并创建用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">DEVICE=eth0</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.0.21</span><br><span class="line">NETMASK=255.255.255.0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install zlib-devel    //安装依赖环境</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -s /sbin/nologin mfs    //创建mfs运行用户</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mfs-1.6.27-5.tar.gz -C /usr/src/ &amp;&amp; <span class="built_in">cd</span> /usr/src/mfs-1.6.27    //解包</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/mfs --with-default-user=mfs --with-default-group=mfs --<span class="built_in">disable</span>-mfschunkserver --<span class="built_in">disable</span>-mfsmount    //配置选项</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install    //编译并安装</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mfs/</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ll                         //看下安装完成生成的目录</span><br><span class="line">drwxr-xr-x 2 root root 4096 Dec  3 11:24 bin         //客户端工具</span><br><span class="line">drwxr-xr-x 3 root root 4096 Dec  3 11:24 etc         //服务器的配置文件都放在该目录中 </span><br><span class="line">drwxr-xr-x 2 root root 4096 Dec  3 11:24 sbin       //服务端启动程序。如：元数据服务器端程序 mfsmaster、数据存储服务器端服务程序mfschunkserver </span><br><span class="line">drwxr-xr-x 4 root root 4096 Dec  3 11:24 share     //文档 </span><br><span class="line">drwxr-xr-x 3 root root 4096 Dec  3 11:24 var         //元数据目录（可在配置文件中自定义到其他目录）</span><br></pre></td></tr></table></figure><p><strong>b.复制文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mfs/etc/mfs/</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mfsmaster.cfg.dist mfsmaster.cfg    //Master配置文件</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mfstopology.cfg.dist mfstopology.cfg    //输出目录配置文件</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mfsexports.cfg.dist mfsexports.cfg    //元数据日志</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/<span class="built_in">local</span>/mfs/var/mfs/metadata.mfs.empty /usr/<span class="built_in">local</span>/mfs/var/mfs/metadata.mfs</span><br><span class="line">//首次安装 master 时，会自动生成一个名为 metadata.mfs.empty 的元数据文件 metadata,该文件是空的。MooseFS master 运必须有文件 metadata.mfs</span><br></pre></td></tr></table></figure><p><strong>c.启动Master Server</strong><br>master 会打开 9420 端口等待 chunkserver 数据存储服务器连接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mfs/sbin/mfsmaster start    //启动master服务</span><br></pre></td></tr></table></figure></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ps</span> -ef | <span class="keyword">grep</span> mfs</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ll /usr/<span class="built_in">local</span>/mfs/var/mfs/         //查看生成的日志文件</span><br><span class="line">-rw-r----- 1 mfs mfs     95 Dec 24 14:30 metadata.mfs</span><br><span class="line">-rw-r----- 1 mfs mfs     95 Dec 24 14:28 metadata.mfs.back.1</span><br><span class="line">-rw-r--r-- 1 mfs mfs      8 Dec 24 14:13 metadata.mfs.empty</span><br><span class="line">-rw-r----- 1 mfs mfs     10 Dec 24 14:28 sessions.mfs</span><br><span class="line">-rw-r----- 1 mfs mfs 762516 Dec 24 14:30 stats.mfs</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mfs/sbin/mfsmaster stop     //服务的关闭方法</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mfs/sbin/mfscgiserv start    //启动web统计</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IE --&gt; 192.168.0.21:9425    //访问web统计界面</span><br></pre></td></tr></table></figure><h3 id="搭建MetaLogger-Server"><a href="#搭建MetaLogger-Server" class="headerlink" title="搭建MetaLogger Server"></a>搭建MetaLogger Server</h3><p><strong>a.安装环境包并创建用户</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">DEVICE=eth0</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.0.22</span><br><span class="line">NETMASK=255.255.255.0</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install zlib-devel</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -s /sbin/nologin mfs</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mfs-1.6.27-5.tar.gz -C /usr/src/ &amp;&amp; <span class="built_in">cd</span> /usr/src/mfs-1.6.27</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/mfs --with-default-user=mfs --with-default-group=mfs --<span class="built_in">disable</span>-mfschunkserver --<span class="built_in">disable</span>-mfsmount</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p><strong>b.复制文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mfs/etc/mfs/</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mfsmetalogger.cfg.dist mfsmetalogger.cfg</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim mfsmetalogger.cfg</span><br><span class="line">MASTER_HOST = 192.168.0.21</span><br><span class="line">//MASTER_HOST，这个文件中需要修改的是 MASTER_HOST 变量，这个变量的值是 MASTER SERVER 的 IP 地址</span><br></pre></td></tr></table></figure><p><strong>c.启动Metalogger Server</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mfs/sbin/mfsmetalogger start</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep mfs</span><br></pre></td></tr></table></figure><h3 id="搭建Chunk-Server-1"><a href="#搭建Chunk-Server-1" class="headerlink" title="搭建Chunk Server 1"></a>搭建Chunk Server 1</h3><p><strong>a.安装环境包并创建用户</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">DEVICE=eth0</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.0.23</span><br><span class="line">NETMASK=255.255.255.0</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install zlib-devel</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -s /sbin/nologin mfs</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mfs-1.6.27-5.tar.gz -C /usr/src/ &amp;&amp; <span class="built_in">cd</span> /usr/src/mfs-1.6.27</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/mfs --with-default-user=mfs --with-default-group=mfs --<span class="built_in">disable</span>-mfsmaster --<span class="built_in">disable</span>-mfsmount</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p><strong>b.复制文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mfs/etc/mfs/</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mfschunkserver.cfg.dist mfschunkserver.cfg</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mfshdd.cfg.dist mfshdd.cfg</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim mfschunkserver.cfg</span><br><span class="line">MASTER_HOST = 192.168.0.21</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim mfshdd.cfg</span><br><span class="line">/data</span><br><span class="line">//数据存放的目录，一般为一块磁盘的挂载目录</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R mfs:mfs /data</span><br></pre></td></tr></table></figure><p><strong>c.启动Chunk服务</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mfs/sbin/mfschunkserver start</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep mfs</span><br></pre></td></tr></table></figure><h3 id="搭建Chunk-Server2"><a href="#搭建Chunk-Server2" class="headerlink" title="搭建Chunk Server2"></a>搭建Chunk Server2</h3><p><strong>a.安装环境包并创建用户</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">DEVICE=eth0</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.0.24</span><br><span class="line">NETMASK=255.255.255.0</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install zlib-devel</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -s /sbin/nologin mfs</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mfs-1.6.27-5.tar.gz -C /usr/src/ &amp;&amp; <span class="built_in">cd</span> /usr/src/mfs-1.6.27</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/mfs --with-default-user=mfs --with-default-group=mfs --<span class="built_in">disable</span>-mfsmaster --<span class="built_in">disable</span>-mfsmount</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p><strong>b.复制文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mfs/etc/mfs/</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mfschunkserver.cfg.dist mfschunkserver.cfg</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mfshdd.cfg.dist mfshdd.cfg</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim mfschunkserver.cfg</span><br><span class="line">MASTER_HOST = 192.168.0.21</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim mfshdd.cfg</span><br><span class="line">/data</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data &amp;&amp; chown mfs:mfs /data</span><br></pre></td></tr></table></figure><p><strong>c.启动Chunk服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mfs/sbin/mfschunkserver start</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep mfs</span><br></pre></td></tr></table></figure><h3 id="client挂载MFS文件系统"><a href="#client挂载MFS文件系统" class="headerlink" title="client挂载MFS文件系统"></a>client挂载MFS文件系统</h3><p><strong>a.安装fuse</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">DEVICE=eth0</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.0.25</span><br><span class="line">NETMASK=255.255.255.0</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf fuse-2.9.2.tar.gz -C /usr/src/ &amp;&amp; <span class="built_in">cd</span> /usr/src/fuse-2.9.2</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="built_in">export</span> PKG_CONFIG_PATH=/usr/<span class="built_in">local</span>/lib/pkgconfig:<span class="variable">$PKG_CONFIG_PATH</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p><strong>b.安装MFS客户端</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -s /sbin/nologin mfs</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf ~/mfs-1.6.27-5.tar.gz -C /usr/src/ &amp;&amp; <span class="built_in">cd</span> /usr/src/mfs-1.6.27</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/mfs --with-default-user=mfs --with-default-group=mfs --<span class="built_in">disable</span>-mfsmaster --<span class="built_in">disable</span>-mfschunkserver --<span class="built_in">enable</span>-mfsmount</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p><strong>c.挂载MFS文件系统</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modprobe fuse      //加载fuse模块到内核</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/rc.local    //开机自动加载</span><br><span class="line">modprobe fuse</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mfs/bin/mfsmount /media -H 192.168.0.21    //挂载</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@mfs_client ~]<span class="comment"># /usr/local/mfs/bin/mfssetgoal -r 1 -H /media/</span></span><br><span class="line">//更改随机copy的次数</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@mfs_client ~]<span class="comment"># /usr/local/mfs/bin/mfsgetgoal -H /media/</span></span><br><span class="line">//查看当前copy的次数</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;MooseFS是一个具有容错性的网络分布式文件系统。它把数据分散存放在多个物理服务器上，而呈现给用户的则是一个统一的资源。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LinuxService" scheme="https://callousmaster.github.io/categories/LinuxService/"/>
    
    
      <category term="MFS分布式文件系统" scheme="https://callousmaster.github.io/tags/MFS%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Git分布式版本控制系统</title>
    <link href="https://callousmaster.github.io/VCS%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>https://callousmaster.github.io/VCS版本控制/Git分布式版本控制系统/</id>
    <published>2018-09-20T00:20:57.000Z</published>
    <updated>2019-04-17T14:17:46.880Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><blockquote class="blockquote-center"><p>Git是一个版本控制系统用于跟踪变化的计算机文件和协调多人之间的那些文件的工作。它主要用于源代码管理在软件开发，但它可以被用来跟踪变化的任何文件集。作为分布式版本控制系统，它旨在提高速度，数据完整性，并支持分布式非线性工作流程。</p></blockquote><a id="more"></a><h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><hr><ul><li>Git是一个版本控制系统用于跟踪变化的计算机文件和协调多人之间的那些文件的工作。</li><li>它主要用于源代码管理在软件开发，但它可以被用来跟踪变化的任何文件集。作为分布式版本控制系统，它旨在提高速度，数据完整性，并支持分布式非线性工作流程。</li><li>与大多数其他分布式版本控制系统一样，与大多数客户端 - 服务器系统不同，每台[计算机上的每个Git 目录都是一个完整的存储库，具有完整的历史记录和完整的版本跟踪能力，独立于网络访问或中央服务器。 </li><li>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。其他内核开发人员为其初始开发做出了贡献。  自2005年以来，它目前的维护者是Junio Hamano。 </li><li>Torvalds 开始着手开发 Git 是为了作为一种过渡方案来替代 BitKeeper，后者之前一直是 Linux 内核开发人员在全球使用的主要源代码工具。开放源码社区中的有些人觉得BitKeeper 的许可证并不适合开放源码社区的工作，因此 Torvalds 决定着手研究许可证更为灵活的版本控制系统。尽管最初 Git 的开发是为了辅助 Linux 内核开发的过程，但是我们已经发现在很多其他自由软件项目中也使用了 Git。例如 很多 Freedesktop 的项目迁移到了 Git 上。 </li><li>Git是根据GNU通用公共许可证版本2 的条款分发的免费开源软件。 </li></ul><h2 id="Git的历史"><a href="#Git的历史" class="headerlink" title="Git的历史"></a>Git的历史</h2><hr><ul><li>起初参与Linux开源项目的代码是由Linus Torvalds本人通过”diff”和”patch”（用于比较两个文件的区别）命令来手动为别人整合代码的，随着项目越做越大，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满。</li><li>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。 </li><li>diff简介<br>作用：比较文件中的不同点<br>格式：diff 文件A 文件B &gt;文件C<br>diff命令用于比较文本文件，能比较单个文件或者目录内容，但只有当输入为文本文件时才有效<br>如果指定了Directory1和Directory2参数，diff命令比较两个目录下名字相同的文本文件，并列出不同的二进制文件、公共子目录和只在一个目录出现的文件<br>diff命令主要用于比较两个文件的差异，并制作成补丁文件，然后使用patch命令对相应的文件打补丁</li><li>于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统</li><li>直到2005年，Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气，开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错），于是BitMover公司怒了，要收回Linux社区的免费使用权</li><li>于是Linus向BitMover公司道个歉，保证以后严格管教弟兄们（嗯，这是不可能的）随后，Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git，一个月之内，Linux系统的源码已经由Git管理了，Git也由此诞生了</li><li>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</li></ul><h2 id="集中式和分布式"><a href="#集中式和分布式" class="headerlink" title="集中式和分布式"></a>集中式和分布式</h2><hr><ul><li><p>Linus一直痛恨的CVS及SVN都是集中式的版本控制系统，而Git是分布式版本控制系统，集中式和分布式版本控制系统有什么区别呢？</p></li><li><p>先说集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。</p></li></ul><p><img src="/images/git/jizhong.jpg" alt></p><ul><li><p>集中式版本控制系统最大的毛病就是必须联网才能工作，如果在局域网内还好，带宽够大，速度够快，可如果在互联网上，遇到网速慢的话，可能提交一个10M的文件就需要5分钟，这还不得把人给憋死啊。</p></li><li><p>那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p></li><li><p>和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。</p></li><li><p>在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p></li></ul><p><img src="/images/git/fenbu.jpg" alt></p><ul><li><p>当然，Git的优势不单是不必联网这么简单，后面我们还会看到Git极其强大的分支管理，把SVN等远远抛在了后面。</p></li><li><p>CVS作为最早的开源而且免费的集中式版本控制系统，直到现在还有不少人在用。由于CVS自身设计的问题，会造成提交文件不完整，版本库莫名其妙损坏的情况。同样是开源而且免费的SVN修正了CVS的一些稳定性问题，是目前用得最多的集中式版本库控制系统。</p></li><li><p>除了免费的外，还有收费的集中式版本控制系统，比如IBM的ClearCase（以前是Rational公司的，被IBM收购了），特点是安装比Windows还大，运行比蜗牛还慢，能用ClearCase的一般是世界500强，他们有个共同的特点是财大气粗，或者人傻钱多。</p></li><li><p>微软自己也有一个集中式版本控制系统叫VSS，集成在Visual Studio中。由于其反人类的设计，连微软自己都不好意思用了。</p></li><li><p>分布式版本控制系统除了Git以及促使Git诞生的BitKeeper外，还有类似Git的Mercurial和Bazaar等。这些分布式版本控制系统各有特点，但最快、最简单也最流行的依然是Git！</p></li></ul><h2 id="Git和SVN的区别"><a href="#Git和SVN的区别" class="headerlink" title="Git和SVN的区别"></a>Git和SVN的区别</h2><hr><ul><li>Git是分布式，SVN是集中式</li><li>Git的每个历史版本存储的是完整的文件，而SVN只是存储文件的差异</li><li>Git可以离线完成大部分操作，SVN不可以</li><li>Git有着更优雅的分支和合并实现</li><li>Git有更强的撤销修改和修改版本历史的能力</li><li>Git速度更快，效率更高</li></ul><h2 id="Git和Github的关系"><a href="#Git和Github的关系" class="headerlink" title="Git和Github的关系"></a>Git和Github的关系</h2><hr><ul><li>Git是一个分布式的版本控制系统</li><li>GitHub是一个基于Git的项目托管平台，它提供了web界面，我们可以在上面创建资源仓库来存放你的项目</li><li>在本地或服务器创建一个资源仓库通过shell命令或图形用户界面可以和远端的GitHub进行项目同步更新，实现对项目的管理</li></ul><h2 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h2><hr><h3 id="yum安装Git"><a href="#yum安装Git" class="headerlink" title="yum安装Git"></a>yum安装Git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install git</span><br><span class="line">//安装git软件包（一般自带），或者源码编译新版本（源码编译时，注意安装curl-devel软件包）</span><br></pre></td></tr></table></figure><h3 id="源码安装Git"><a href="#源码安装Git" class="headerlink" title="源码安装Git"></a>源码安装Git</h3><p><a href="https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.19.0.tar.xz" target="_blank" rel="noopener">点击下载git-2.19.0.tar.xz的源码包</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum -y install perl-ExtUtils-MakeMaker gettext-devel expat-devel curl-devel zlib-devel openssl-devel openssl-devel gcc-c++ make    //安装依赖包</span><br><span class="line">tar -Jxvf git-2.19.0.tar.xz -C /usr/src/</span><br><span class="line"><span class="built_in">cd</span> /usr/src/git-2.19.0/</span><br><span class="line">make prefix=/usr/<span class="built_in">local</span>/git all    //编译所有模块</span><br><span class="line">make prefix=/usr/<span class="built_in">local</span>/git install    //安装</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export PATH=<span class="variable">$PATH</span>:/usr/local/git/bin"</span>&gt;&gt; /etc/profile    //将命令添加到环境变量</span><br><span class="line">yum -y erase git    //卸载yum安装的git</span><br><span class="line"><span class="built_in">source</span> /etc/profile    //重新读取环境变量文件使之生效</span><br><span class="line">git --version    //验证git是否为源码编译版本</span><br></pre></td></tr></table></figure><h2 id="Git入门"><a href="#Git入门" class="headerlink" title="Git入门"></a>Git入门</h2><hr><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><ul><li>本地仓库中的代码最终是要上传到GitHub中，而在上传的时候，必须要指定个人信息，包括用户名和邮箱地址，方便团队或者项目组中其他人员知道是谁修改或者上传了代码，所以首先要设置用户名和邮箱地址</li></ul><h4 id="设置用户名和邮箱"><a href="#设置用户名和邮箱" class="headerlink" title="设置用户名和邮箱"></a>设置用户名和邮箱</h4><ul><li>该用户名、邮箱应为Github网站注册填写的用户名及邮箱</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name用户名    //设置用户名</span><br><span class="line">git config --global user.email 邮箱地址    //设置邮箱</span><br><span class="line">git config –list    //查看git配置</span><br></pre></td></tr></table></figure><font color="red">注：也可通过”vim ~/.gitconfig”指定用户名及邮箱</font><h4 id="删除用户信息"><a href="#删除用户信息" class="headerlink" title="删除用户信息"></a>删除用户信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> user.name 用户名    //如果有多个用户，想删除指定的用户可以使用</span><br></pre></td></tr></table></figure><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init    //在当前目录，初始化本地仓库,也可在`git init`后面添加指定的目录</span><br></pre></td></tr></table></figure><h4 id="创建并编辑文件"><a href="#创建并编辑文件" class="headerlink" title="创建并编辑文件"></a>创建并编辑文件</h4><ul><li>直接在本地仓库下新建文件即可</li></ul><blockquote><p>例：</p><p>vim /opt/git/Demo.txt    //在本地工作目录下新建文件</p><p>​    第一次</p><p><img src="/images/git/5.png" alt></p></blockquote><h4 id="将文件新增到暂存区"><a href="#将文件新增到暂存区" class="headerlink" title="将文件新增到暂存区"></a>将文件新增到暂存区</h4><ul><li>刚才创建的Demo.txt文件虽然在本地仓库目录下，但是并没有被仓库所管理，这时需要使用git add让文件被仓库管理（进入暂存区）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 文件路径</span><br></pre></td></tr></table></figure><blockquote><p>例：</p><p>git status    //查看当前仓库文件状态（可以看出，没有提交和新增文件，但有跟踪到新文件）</p><p>git add Demo.txt    //将文件提交到暂存区</p><p>git status    //再次验证后，文件状态发生改变</p></blockquote><h4 id="将文件提交到历史仓库"><a href="#将文件提交到历史仓库" class="headerlink" title="将文件提交到历史仓库"></a>将文件提交到历史仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"文字说明"</span></span><br></pre></td></tr></table></figure><blockquote><p>例：</p><p>git commit -m “第一次提交”    //将所有暂存区内容提交到仓库</p><p>git status    //再次查看仓库状态后，可以看见无任何内容</p><p><img src="/images/git/6.png" alt></p></blockquote><font color="red">注：所有新增或更改的文件都会先放在暂存区，但确认无误时，在使用commit提交（这样的好处在于，如果更改错误随时可以回退）</font><h4 id="对文件进行修改"><a href="#对文件进行修改" class="headerlink" title="对文件进行修改"></a>对文件进行修改</h4><blockquote><p>例：</p><p>vim /opt/git/Demo.txt    //测试，修改下文件内容</p><p>​    第一次</p><p>​    第二次</p><p>git status    //查看仓库状态后，可以看见检测到文件发生更改，但没有新增和提交</p><p><img src="/images/git/7.png" alt></p><p><img src="/images/git/8.png" alt></p></blockquote><p>此时，我们对修改的文件有两种处理方式</p><p>①确实需要修改，那么我们使用git add将文件放进暂存区</p><p>②如果是误修改，我们可以将文件回滚到之前的版本</p><h4 id="对比文件差异"><a href="#对比文件差异" class="headerlink" title="对比文件差异"></a>对比文件差异</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff 文件    //查看文件变动情况</span><br></pre></td></tr></table></figure><blockquote><p>例：</p><p>git diff Demo.txt    //查看文件更改情况，显示新增第二行内容</p><p><img src="/images/git/9.png" alt></p></blockquote><h4 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h4><ul><li>这里的撤销指的是，修改的文件还没有被提交（git add命令）到暂存区</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 文件    //撤销指定文件修改（未提交到暂存区前）</span><br></pre></td></tr></table></figure><blockquote><p>例：</p><p>cat Demo.txt    //查看当前文件内容</p><p>git checkout Demo.txt    //撤销文件修改</p><p>git status    //仓库状态查看后，无内容</p><p>cat Demo.txt    //再次验证文件内容，证明文件撤销成功</p><p><img src="/images/git/10.png" alt></p></blockquote><font color="red">如果修改的文件已提交到缓存区</font><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD 文件    //取消指定文件的暂存区修改（再使用checkout即可）</span><br></pre></td></tr></table></figure><blockquote><p>例：</p><p>cat Demo.txt    //查看当前文件内容</p><p>vim /opt/git/Demo.txt    //测试，修改下文件内容</p><p>​    第一次</p><p>​    第二次</p><p><img src="/images/git/11.png" alt></p><p>git status    //查看仓库状态后，可以看见检测到文件发生更改，但没有新增和提交</p><p>git add Demo.txt    //将文件修改提交到暂存区</p><p>git status    //再次验证后，文件状态发生改变</p><p><img src="/images/git/12.png" alt></p><p>git checkout Demo.txt    //撤销文件修改</p><p>cat Demo.txt    //验证结果，撤销失败</p><p><img src="/images/git/13.png" alt></p><p>git reset HEAD Demo.txt    //取消Demo.txt文件暂存区的更改</p><p>git status    //查看仓库状态后，可以看见检测到文件发生更改，但没有新增和提交（代表新增操作还原）</p><p>git checkout Demo.txt    //再次执行撤销文件操作</p><p>cat Demo.txt    //验证结果，撤销成功</p><p><img src="/images/git/14.png" alt></p></blockquote><h3 id="工作区，暂存区，历史仓库"><a href="#工作区，暂存区，历史仓库" class="headerlink" title="工作区，暂存区，历史仓库"></a>工作区，暂存区，历史仓库</h3><h4 id="基本描述"><a href="#基本描述" class="headerlink" title="基本描述"></a>基本描述</h4><ul><li><p>当git init初始化git仓库之后，在文件夹中会多出一个.git隐藏文件夹，这个.git隐藏文件夹就是git的版本库repository</p></li><li><p>创建Git仓库的文件夹就是工作区working directory</p></li><li><p>暂存区：暂存区可以理解为一个虚拟工作区，这个虚拟工作区会跟踪工作区的文件变化（增删改等操作），工作区的位于.git文件夹下的index目录下</p></li></ul><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li><p>当需要对工作区的修改提交到版本库前，暂存区会与工作区进行差异比较，如果工作区与暂存区的文件不一致，那么需要同步工作区的修改到暂存区，然后才可以提交到版本库</p></li><li><p>暂存区可以说是工作区和版本库的桥梁，我们对文件的修改可以先放在暂存区中，如果后悔了不仅可以非常方便撤销，而且不会影响到现有的版本库</p></li><li><p>只要我们使用过git add，那么文件就会被跟踪，暂存区跟踪记录了工作区的文件名和文件状态（在index文件中会记录修改时间，文件大小等信息），当下次对文件进行修改的时候，会比较时间戳来判断文件是否被修改</p></li><li><p>并且在执行git status时，首先会到.git/index下查看被跟踪的工作区文件的时间戳，如果发现自上次执行git add（执行git add可以让工作区的文件被跟踪）以来，文件的时间戳发生了变化，那么判断文件发生了改动，于是会与暂存区的原始文件与工作区中的该文件进行差异比较，如果发现两个文件内容不一致，那么就给出差异信息</p></li></ul><h4 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h4><blockquote><p>cd /opt/git    //进入工作目录</p><p>touch newfile.txt    //创建空文件</p><p>vim Demo.txt    //修改已提交暂存区的文件内容</p><p>​    第一次</p><p>​    第二次</p><p>git status    //查看当前仓库状态</p><p>git diff    //查看暂存区和工作区文件差异</p><p>git add newfile.txt Demo.txt    //将指定两个文件添加到暂存区</p><p>git status    //再次查看当前仓库状态</p><p>git diff    //这时再次比对暂存区和工作区差异，无区别</p><p>git commit -m “第二次更改”    //将暂存区所有文件提交</p><p>git status    //再次查看仓库暂存区状态，无内容</p></blockquote><h3 id="查询历史提交记录"><a href="#查询历史提交记录" class="headerlink" title="查询历史提交记录"></a>查询历史提交记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span>    //查询所有提交的历史文件commit id、作者以及提交时间、提交信息但是不包括之前删除的历史记录</span><br></pre></td></tr></table></figure><p><img src="/images/git/15.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=oneline    //只查询所有提交文件的commit id</span><br></pre></td></tr></table></figure><p><img src="/images/git/16.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=oneline 文件名    //查询指定某个文件的commit id</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p><img src="/images/git/17.png" alt></p><h4 id="git-log和git-reflog的区别"><a href="#git-log和git-reflog的区别" class="headerlink" title="git log和git reflog的区别"></a>git log和git reflog的区别</h4><ul><li>git log查询的是commit id，作者以及提交时间和提交信息，但是不包括之前删除的历史记录</li><li>git reflog查询的是简洁的commit id和提交信息，也会包含之前删除的历史记录</li></ul><h3 id="回退历史版本"><a href="#回退历史版本" class="headerlink" title="回退历史版本"></a>回退历史版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  reset  版本ID    //回退到指定版本（版本id可通过git relog查看）</span><br></pre></td></tr></table></figure><blockquote><p>例：</p><p>git reflog    //查看所有提交文件版本id</p><p>git reset fc3523e    //回退到指定版本id时的状态</p><p>git status    //查看仓库状态</p><p>git checkout Demo.txt    //撤销Demo.txt文件修改</p><p>cat Demo.txt    //验证结果，回滚成功</p><p><img src="/images/git/18.png" alt></p></blockquote><h3 id="误删除工作区的文件"><a href="#误删除工作区的文件" class="headerlink" title="误删除工作区的文件"></a>误删除工作区的文件</h3><blockquote><p>例： </p><p>rm -rf Demo.txt    //模拟文件删除</p><p>ls    //验证文件是否删除</p><p>git status    //仓库状态更改</p><p>git checkout Demo.txt    //撤销Demo.txt文件修改操作</p><p>git status    //再次查看仓库状态</p><p>ls    //验证文件是否还原</p><p>cat Demo.txt    //验证结果，还原成功</p><p><img src="/images/git/19.png" alt></p></blockquote><h3 id="真正删除文件"><a href="#真正删除文件" class="headerlink" title="真正删除文件"></a>真正删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm 文件    //从仓库中删除指定文件</span><br></pre></td></tr></table></figure><blockquote><p>例：</p><p>ls    //查看文件</p><p>git rm Demo.txt    //从仓库中删除Demo.txt</p><p>git commit -m “删除Demo.txt文件”    //提交删除操作到仓库</p><p>ls    //验证文件是否删除</p><p>git status    //再次查看仓库状态</p><p><img src="/images/git/20.png" alt></p></blockquote><h2 id="GitHub账号注册：https-github-com"><a href="#GitHub账号注册：https-github-com" class="headerlink" title="GitHub账号注册：https://github.com/"></a>GitHub账号注册：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></h2><hr><h2 id="与远程仓库关联"><a href="#与远程仓库关联" class="headerlink" title="与远程仓库关联"></a>与远程仓库关联</h2><hr><h3 id="在本地生成ssh-key"><a href="#在本地生成ssh-key" class="headerlink" title="在本地生成ssh key"></a>在本地生成ssh key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"邮箱地址"</span></span><br></pre></td></tr></table></figure><blockquote><p>例：</p><p>ssh-keygen -t rsa -C “GitHub注册邮箱”    //本地生成rsa算法的私钥及公钥文件，-C指定标识名称</p></blockquote><p><img src="/images/ssh-keygen.png" alt></p><h3 id="Github中添加公钥"><a href="#Github中添加公钥" class="headerlink" title="Github中添加公钥"></a>Github中添加公钥</h3><p><img src="/images/git/1.png" alt></p><p><img src="/images/git/2.png" alt></p><p><img src="/images/git/3.png" alt></p><p><img src="/images/git/4.png" alt></p><h3 id="在GitHub中创建一个远程仓库"><a href="#在GitHub中创建一个远程仓库" class="headerlink" title="在GitHub中创建一个远程仓库"></a>在GitHub中创建一个远程仓库</h3><p><img src="/images/git/21.png" alt></p><h3 id="复制远程仓库的地址"><a href="#复制远程仓库的地址" class="headerlink" title="复制远程仓库的地址"></a>复制远程仓库的地址</h3><p><img src="/images/git/22.png" alt></p><h3 id="本地clone远程仓库"><a href="#本地clone远程仓库" class="headerlink" title="本地clone远程仓库"></a>本地clone远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/CallousMaster/callousmaster.github.io.git</span><br></pre></td></tr></table></figure><p><img src="/images/git/23.png" alt></p><p>如出现：”fatal: HTTP request failed”，则有可能是git版本太低，需源码安装高版本。详情见开头的源码安装Git</p><p>如出现：”fatal: unable to access ‘<a href="https://github.com/CallousMaster/callousmaster.github.io.git/&#39;" target="_blank" rel="noopener">https://github.com/CallousMaster/callousmaster.github.io.git/&#39;</a>: SSL connect error “，<font color="red">需更新系统软件包</font></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum<span class="selector-class">.repos</span><span class="selector-class">.d</span>/CentOS-Base<span class="selector-class">.repohttp</span>:<span class="comment">//mirrors.aliyun.com/repo/Centos-6.repo    //下载在线源</span></span><br><span class="line">yum -y update    <span class="comment">//更新系统系统所有包</span></span><br><span class="line">reboot    <span class="comment">//重启后，即可正常使用</span></span><br></pre></td></tr></table></figure><h3 id="本地修改代码之后提交到远程仓库"><a href="#本地修改代码之后提交到远程仓库" class="headerlink" title="本地修改代码之后提交到远程仓库"></a>本地修改代码之后提交到远程仓库</h3><p>vim demo.txt    //在仓库下新增文件</p><p>​    第一次提交GitHub</p><p><img src="/images/git/24.png" alt></p><p>git add demo.txt    //将文件添加到暂存区</p><p>git commit -m “第一次更改”    //将暂存区内容提交到本地仓库</p><p><img src="/images/git/25.png" alt></p><p>git status    //仓库状态查看后，提示需提交到远程仓库</p><p>git remote add first <a href="https://github.com/CallousMaster/callousmaster.github.io.git" target="_blank" rel="noopener">https://github.com/CallousMaster/callousmaster.github.io.git</a>   //在本地仓库添加一个远程仓库，后面的地址是远程仓库的地址，first为远程仓库标识名称可自定义</p><p>git push -u first master    //将本地仓库内容提交到远程仓库master分支（第一次-u必须使用，之后提交操作可以忽略），注意输入用户名、密码</p><p><img src="/images/git/26.png" alt></p><p><img src="/images/git/27.png" alt></p><p><strong>可以使用命令**</strong><code>git remote rm first</code>删除关联的远程仓库**</p><p><strong>使用**</strong><code>git remote show first</code>来查看first远程仓库的具体分支**</p><p><strong>使用**</strong><code>git remote –v</code>来查看与当前本地仓库相关联的远程仓库**</p><blockquote><p>例：</p><p>git remote -v</p><p>git remote rm origin    //删除名称为origin的远程仓库链接</p><p>git remote -v</p><p>git remote show first    //查看指定远程仓库信息</p><p><img src="/images/git/28.png" alt></p></blockquote><h3 id="在GitHub上查看差异文件"><a href="#在GitHub上查看差异文件" class="headerlink" title="在GitHub上查看差异文件"></a>在GitHub上查看差异文件</h3><h4 id="修改本地仓库的文件并上传"><a href="#修改本地仓库的文件并上传" class="headerlink" title="修改本地仓库的文件并上传"></a>修改本地仓库的文件并上传</h4><p>vim demo.txt    //在仓库下新增文件</p><p>​    第一次提交GitHub</p><p>​    第二次提交GitHub</p><p><img src="/images/git/29.png" alt></p><p>git add demo.txt    //将文件添加到暂存区</p><p>git commit -m “第二次修改”</p><p>git push first master    //将本地仓库内容提交到远程仓库master分支</p><p><img src="/images/git/30.png" alt></p><h4 id="上传成功后，在GitHub上查询差异"><a href="#上传成功后，在GitHub上查询差异" class="headerlink" title="上传成功后，在GitHub上查询差异"></a>上传成功后，在GitHub上查询差异</h4><p><img src="/images/git/31.png" alt></p><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><hr><h3 id="分支的引入"><a href="#分支的引入" class="headerlink" title="分支的引入"></a>分支的引入</h3><ul><li><p>Master 是主分支，主要作为程序的发布，可以理解为是项目的最终版本，所以不能在master上进行开发，所以应该建立子分支进行开发</p></li><li><p>团队中多个人开发一下项目，一同事在开发一个新的功能，需要一周时间完成，他写了其中的50%还没有写完，如果他提交了这个版本，那么团队中的其它人就不能继续开发了，但是等到他全部写完再全部提交，又存在每天进度丢失的风险，这如何是好呢？ </p></li><li><p>对于上面的这个问题，我们就可以用分支管理的办法来解决，一同事开发新功能他可以创建一个属于他自己的分支，其它同事暂时看不到，继续在开发分支（一般都有多个分支）上干活，他在自己的分支上干活，等他全部开发完成，再一次性的合并到主分支上，这样我们既可知道他的开发进度，又不影响大家干活</p></li><li><p>其他的版本控制器也有分支的概念，只不过切换，删除分支的时候非常慢、效率低下，而git切换或者删除分支几乎就是一瞬间的事</p></li></ul><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  branch    //查看分支，默认只有一个master</span><br></pre></td></tr></table></figure><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  branch 分支名称</span><br></pre></td></tr></table></figure><blockquote><p>例：</p><p>git branch test    //创建名称为test的新分支</p><p>git branch</p><p><img src="/images/git/32.png" alt></p></blockquote><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名称</span><br></pre></td></tr></table></figure><blockquote><p>例：</p><p>git checkout test    //切换到test分支工作</p><p>git branch</p><p><img src="/images/git/33.png" alt></p></blockquote><h3 id="创建并切换分支"><a href="#创建并切换分支" class="headerlink" title="创建并切换分支"></a>创建并切换分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 分支名称</span><br></pre></td></tr></table></figure><blockquote><p>例：</p><p>git checkout -b test2    //创建test2新分支并切换到该分支</p><p>git branch</p><p><img src="/images/git/34.png" alt></p></blockquote><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 分支名称</span><br></pre></td></tr></table></figure><p>注：如果要删除的分支，正处于当前工作分支，必须切换到其余分支中才能删除</p><blockquote><p>例：</p><p>git branch -d test    //删除名为test分支</p><p>git branch</p><p><img src="/images/git/35.png" alt></p></blockquote><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><blockquote><p>例：</p><p>git branch    //查看当前所处分支</p><p>vim test2.txt    //在test2分支下新建test2.txt文件</p><p>test2</p><p><img src="/images/git/36.png" alt></p><p>git add test2.txt    //将文件提交到暂存区</p><p>git commit -m “test2分支下新建文件”    //将暂存区内容提交到本地仓库</p><p>git checkout master    //切换到master分支</p><p>ls    //验证后，发现test2分支文件不能查看</p><p>git merge test2    //将test2分支合并到当前分支</p><p>ls    //合并分支后，文件新增</p><p><img src="/images/git/37.png" alt></p></blockquote><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><ul><li><p>代码冲突如何产生的：当在分支上进行开发的时候，难免遇到别的开发人员和我们自己向仓库中提交相同的代码</p></li><li><p>比如有一个商城的项目，开发人员A和开发人员B都对同一段代码做了修改，当A进行提交后并push到远程仓库中master合并，B再进行提交并与远程仓库中的master进行合并这时候就会出现代码冲突</p></li></ul><blockquote><p>例：</p><p>git checkout test2    //切换到test2分支</p><p><img src="/images/git/38.png" alt></p><p>vim test2.txt    //编辑文件</p><p>​    test2</p><p><img src="/images/git/39.png" alt></p><p>test2分支修改</p><p>git add test2.txt    //添加文件到暂存区</p><p>git commit -m “test2分支修改”    //将暂存区内容提交到test2分支</p><p>git checkout master    //切换到master分支</p><p><img src="/images/git/40.png" alt></p><p>vim test2.txt    //master分支下，再次修改该文件</p><p>​    test2</p><p><img src="/images/git/41.png" alt></p><p>主分支更改</p><p>git add test2.txt    //添加更改到暂存区</p><p>git commit -m “master分支修改”    //将暂存区内容提交到master分支</p><p><img src="/images/git/42.png" alt></p><p>git merge test2    //将test2分支合并到当前分支</p><p><img src="/images/git/43.png" alt></p><p>git status    //仓库状态查看</p><p>cat test2.txt    //查看合并后文件内容（这时能看见两个分支更改内容，将冲突删除或修改）</p><p>vim test2.txt     //合并文件</p><p>​    test2</p><p><img src="/images/git/44.png" alt></p><p>合并完毕</p><p>git add test2.txt    //添加更改到暂存区</p><p>git commit -m “master解决冲突”    //将暂存区内容提交到master分支</p><p>git merge test2    //将test2分支合并到当前分支</p><p>cat test2.txt    //验证合并情况</p><p><img src="/images/git/45.png" alt></p></blockquote><h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><hr><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>标签就是版本库的一个快照，在发布新版本的时候，一般都会给老的版本打个标签，方便后续直接使用指定的版本</p><h3 id="查询和创建标签"><a href="#查询和创建标签" class="headerlink" title="查询和创建标签"></a>查询和创建标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag    //查询标签</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag 标签名称    //创建标签</span><br></pre></td></tr></table></figure><blockquote><p>例：</p><p>git tag version1    //创建version标签（默认无标签）</p><p>git tag</p><p><img src="/images/git/46.png" alt></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a 标签名称 -m <span class="string">"描述信息"</span>    //新建标签，并添加描述信息</span><br></pre></td></tr></table></figure><blockquote><p>例：</p><p>git tag -a version2 -m “版本2”    //新建version2标签，并添加描述信息</p><p>git tag</p><p><img src="/images/git/47.png" alt></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag  标签名称 commitID    //给之前忘记打标签的文件，设置标签</span><br></pre></td></tr></table></figure><blockquote><p>例：</p><p>git log –pretty=oneline    //查看当前分支所有已提交文件id</p><p>git tag version3 89c87e8f33aac869861a20928ec133862281a980    //给指定commit id创建标签</p><p><img src="/images/git/48.png" alt></p></blockquote><h3 id="查询标签说明"><a href="#查询标签说明" class="headerlink" title="查询标签说明"></a>查询标签说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show 标签名称    //查看标签信息</span><br></pre></td></tr></table></figure><blockquote><p>例：</p><p>git show version    //查看version3标签信息</p><p><img src="/images/git/49.png" alt></p></blockquote><h3 id="删除本地标签"><a href="#删除本地标签" class="headerlink" title="删除本地标签"></a>删除本地标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d 标签名称    //删除标签</span><br></pre></td></tr></table></figure><blockquote><p>例：</p><p>git tag//查看当前所有标签</p><p>git tag -d version2    //删除version2标签</p><p>git tag    //验证标签是否删除</p><p><img src="/images/git/50.png" alt></p><p><img src="/images/git/51.png" alt></p></blockquote><h3 id="提交标签到远程仓库"><a href="#提交标签到远程仓库" class="headerlink" title="提交标签到远程仓库"></a>提交标签到远程仓库</h3><h4 id="提交指定的版本号到远程仓库"><a href="#提交指定的版本号到远程仓库" class="headerlink" title="提交指定的版本号到远程仓库"></a>提交指定的版本号到远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push 远程仓库名 标签名称    //提交标签到远程仓库</span><br></pre></td></tr></table></figure><blockquote><p>例：</p><p>git push first version1    //将version1标签提交到远程仓库</p><p><img src="/images/git/52.png" alt></p><p><img src="/images/git/53.png" alt></p></blockquote><h4 id="提交所有版本号到远程仓库"><a href="#提交所有版本号到远程仓库" class="headerlink" title="提交所有版本号到远程仓库"></a>提交所有版本号到远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push 远程仓库名 --tags    //提交所有版本号到远程仓库</span><br></pre></td></tr></table></figure><blockquote><p>例：</p><p>git push first –tags    //提交本地仓库所有标签</p><p><img src="/images/git/54.png" alt></p><p><img src="/images/git/55.png" alt></p></blockquote><h3 id="删除远程仓库标签"><a href="#删除远程仓库标签" class="headerlink" title="删除远程仓库标签"></a>删除远程仓库标签</h3><h4 id="首先删除本地标签"><a href="#首先删除本地标签" class="headerlink" title="首先删除本地标签"></a>首先删除本地标签</h4><blockquote><p>例：</p><p>git tag -d version1    //删除本地version1标签</p></blockquote><h4 id="再删除远程标签"><a href="#再删除远程标签" class="headerlink" title="再删除远程标签"></a>再删除远程标签</h4><blockquote><p>git push first :refs/tags/version1    //远程远程version1标签</p><p><img src="/images/git/56.png" alt></p><p><img src="/images/git/57.png" alt></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Git是一个版本控制系统用于跟踪变化的计算机文件和协调多人之间的那些文件的工作。它主要用于源代码管理在软件开发，但它可以被用来跟踪变化的任何文件集。作为分布式版本控制系统，它旨在提高速度，数据完整性，并支持分布式非线性工作流程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="VCS版本控制" scheme="https://callousmaster.github.io/categories/VCS%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="Git" scheme="https://callousmaster.github.io/tags/Git/"/>
    
      <category term="VCS" scheme="https://callousmaster.github.io/tags/VCS/"/>
    
  </entry>
  
</feed>
